
INS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae4  08007ae4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aec  08007aec  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d1c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e18  20001e18  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164a5  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318a  00000000  00000000  000365d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f80  00000000  00000000  0003ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175d7  00000000  00000000  0005d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfa86  00000000  00000000  00074f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001349fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b38  00000000  00000000  00134a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a6c 	.word	0x08007a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007a6c 	.word	0x08007a6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fadc 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f80c 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f902 	bl	80006e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f006 fda6 	bl	800702c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80004e0:	f000 f870 	bl	80005c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f8d2 	bl	800068c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004e8:	f000 f89a 	bl	8000620 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f007 faac 	bl	8007a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000564:	23a8      	movs	r3, #168	; 0xa8
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056c:	2307      	movs	r3, #7
 800056e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f002 f9a9 	bl	80028cc <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000580:	f000 f90e 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2105      	movs	r1, #5
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fc0a 	bl	8002dbc <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ae:	f000 f8f7 	bl	80007a0 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	; 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <MX_I2C1_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_I2C1_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_I2C1_Init+0x50>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_I2C1_Init+0x50>)
 8000602:	f000 fda1 	bl	8001148 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f8c8 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000118 	.word	0x20000118
 8000618:	40005400 	.word	0x40005400
 800061c:	000186a0 	.word	0x000186a0

08000620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_SPI1_Init+0x64>)
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <MX_SPI1_Init+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_SPI1_Init+0x64>)
 800062c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_SPI1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_SPI1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_SPI1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_SPI1_Init+0x64>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_SPI1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_SPI1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_SPI1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_SPI1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_SPI1_Init+0x64>)
 800066c:	220a      	movs	r2, #10
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_SPI1_Init+0x64>)
 8000672:	f002 fdc1 	bl	80031f8 <HAL_SPI_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800067c:	f000 f890 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000016c 	.word	0x2000016c
 8000688:	40013000 	.word	0x40013000

0800068c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART1_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f002 fe21 	bl	800330a <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f867 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001c4 	.word	0x200001c4
 80006dc:	40011000 	.word	0x40011000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_GPIO_Init+0xb8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <MX_GPIO_Init+0xb8>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <MX_GPIO_Init+0xb8>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0xb8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000766:	2200      	movs	r2, #0
 8000768:	f24e 0130 	movw	r1, #57392	; 0xe030
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0xbc>)
 800076e:	f000 fcd1 	bl	8001114 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000772:	f24e 0330 	movw	r3, #57392	; 0xe030
 8000776:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0xbc>)
 800078c:	f000 fb26 	bl	8000ddc <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a19      	ldr	r2, [pc, #100]	; (8000880 <HAL_I2C_MspInit+0x84>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d12b      	bne.n	8000876 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_I2C_MspInit+0x88>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_I2C_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083a:	23c0      	movs	r3, #192	; 0xc0
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084a:	2304      	movs	r3, #4
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <HAL_I2C_MspInit+0x8c>)
 8000856:	f000 fac1 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_I2C_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_I2C_MspInit+0x88>)
 8000864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_I2C_MspInit+0x88>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40005400 	.word	0x40005400
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_SPI_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23e0      	movs	r3, #224	; 0xe0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f6:	2305      	movs	r3, #5
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_SPI_MspInit+0x8c>)
 8000902:	f000 fa6b 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000988:	2307      	movs	r3, #7
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000994:	f000 fa22 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f89a 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <OTG_FS_IRQHandler+0x10>)
 8000a06:	f000 fe33 	bl	8001670 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200016ec 	.word	0x200016ec

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a62:	f7ff ffd7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f006 ffd5 	bl	8007a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fd2f 	bl	80004cc <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a7c:	08007af4 	.word	0x08007af4
  ldr r2, =_sbss
 8000a80:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a84:	20001e18 	.word	0x20001e18

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f94f 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fe74 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f967 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f92f 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000208 	.word	0x20000208

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000208 	.word	0x20000208

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e16b      	b.n	80010d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 815a 	bne.w	80010ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80b4 	beq.w	80010ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <HAL_GPIO_Init+0x30c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a5f      	ldr	r2, [pc, #380]	; (80010e8 <HAL_GPIO_Init+0x30c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_GPIO_Init+0x30c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a5b      	ldr	r2, [pc, #364]	; (80010ec <HAL_GPIO_Init+0x310>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a52      	ldr	r2, [pc, #328]	; (80010f0 <HAL_GPIO_Init+0x314>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d02b      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a51      	ldr	r2, [pc, #324]	; (80010f4 <HAL_GPIO_Init+0x318>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <HAL_GPIO_Init+0x31c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4f      	ldr	r2, [pc, #316]	; (80010fc <HAL_GPIO_Init+0x320>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x216>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4d      	ldr	r2, [pc, #308]	; (8001104 <HAL_GPIO_Init+0x328>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x212>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_GPIO_Init+0x32c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x20e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_GPIO_Init+0x330>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x20a>
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	e00e      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x310>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_GPIO_Init+0x334>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <HAL_GPIO_Init+0x334>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <HAL_GPIO_Init+0x334>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <HAL_GPIO_Init+0x334>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_GPIO_Init+0x334>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_GPIO_Init+0x334>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_GPIO_Init+0x334>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_GPIO_Init+0x334>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f ae90 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400
 8001108:	40021800 	.word	0x40021800
 800110c:	40021c00 	.word	0x40021c00
 8001110:	40013c00 	.word	0x40013c00

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e12b      	b.n	80013b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fb44 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2224      	movs	r2, #36	; 0x24
 8001178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800119a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011ac:	f001 fffc 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80011b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a81      	ldr	r2, [pc, #516]	; (80013bc <HAL_I2C_Init+0x274>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d807      	bhi.n	80011cc <HAL_I2C_Init+0x84>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4a80      	ldr	r2, [pc, #512]	; (80013c0 <HAL_I2C_Init+0x278>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bf94      	ite	ls
 80011c4:	2301      	movls	r3, #1
 80011c6:	2300      	movhi	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	e006      	b.n	80011da <HAL_I2C_Init+0x92>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4a7d      	ldr	r2, [pc, #500]	; (80013c4 <HAL_I2C_Init+0x27c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	bf94      	ite	ls
 80011d4:	2301      	movls	r3, #1
 80011d6:	2300      	movhi	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0e7      	b.n	80013b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4a78      	ldr	r2, [pc, #480]	; (80013c8 <HAL_I2C_Init+0x280>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <HAL_I2C_Init+0x274>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d802      	bhi.n	800121c <HAL_I2C_Init+0xd4>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	e009      	b.n	8001230 <HAL_I2C_Init+0xe8>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a69      	ldr	r2, [pc, #420]	; (80013cc <HAL_I2C_Init+0x284>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	3301      	adds	r3, #1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	430b      	orrs	r3, r1
 8001236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	495c      	ldr	r1, [pc, #368]	; (80013bc <HAL_I2C_Init+0x274>)
 800124c:	428b      	cmp	r3, r1
 800124e:	d819      	bhi.n	8001284 <HAL_I2C_Init+0x13c>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e59      	subs	r1, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fbb1 f3f3 	udiv	r3, r1, r3
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001264:	400b      	ands	r3, r1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HAL_I2C_Init+0x138>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1e59      	subs	r1, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	3301      	adds	r3, #1
 800127a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127e:	e051      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001280:	2304      	movs	r3, #4
 8001282:	e04f      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <HAL_I2C_Init+0x168>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1e58      	subs	r0, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	440b      	add	r3, r1
 800129a:	fbb0 f3f3 	udiv	r3, r0, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	e012      	b.n	80012d6 <HAL_I2C_Init+0x18e>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	0099      	lsls	r1, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Init+0x196>
 80012da:	2301      	movs	r3, #1
 80012dc:	e022      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <HAL_I2C_Init+0x1bc>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e58      	subs	r0, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6859      	ldr	r1, [r3, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	440b      	add	r3, r1
 80012f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	e00f      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1e58      	subs	r0, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	0099      	lsls	r1, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	fbb0 f3f3 	udiv	r3, r0, r3
 800131a:	3301      	adds	r3, #1
 800131c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	6809      	ldr	r1, [r1, #0]
 8001328:	4313      	orrs	r3, r2
 800132a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6911      	ldr	r1, [r2, #16]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68d2      	ldr	r2, [r2, #12]
 800135e:	4311      	orrs	r1, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	000186a0 	.word	0x000186a0
 80013c0:	001e847f 	.word	0x001e847f
 80013c4:	003d08ff 	.word	0x003d08ff
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	10624dd3 	.word	0x10624dd3

080013d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b08f      	sub	sp, #60	; 0x3c
 80013d4:	af0a      	add	r7, sp, #40	; 0x28
 80013d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e10f      	b.n	8001602 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d106      	bne.n	8001402 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f005 fff5 	bl	80073ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fb48 	bl	8003ab6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	687e      	ldr	r6, [r7, #4]
 800142e:	466d      	mov	r5, sp
 8001430:	f106 0410 	add.w	r4, r6, #16
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001440:	e885 0003 	stmia.w	r5, {r0, r1}
 8001444:	1d33      	adds	r3, r6, #4
 8001446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f002 fa1f 	bl	800388c <USB_CoreInit>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0d0      	b.n	8001602 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fb36 	bl	8003ad8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e04a      	b.n	8001508 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	333d      	adds	r3, #61	; 0x3d
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	333c      	adds	r3, #60	; 0x3c
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	b298      	uxth	r0, r3
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3344      	adds	r3, #68	; 0x44
 80014ae:	4602      	mov	r2, r0
 80014b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	3340      	adds	r3, #64	; 0x40
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	3348      	adds	r3, #72	; 0x48
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	334c      	adds	r3, #76	; 0x4c
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3354      	adds	r3, #84	; 0x54
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	3301      	adds	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3af      	bcc.n	8001472 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e044      	b.n	80015a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3b5      	bcc.n	8001518 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	687e      	ldr	r6, [r7, #4]
 80015b4:	466d      	mov	r5, sp
 80015b6:	f106 0410 	add.w	r4, r6, #16
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ca:	1d33      	adds	r3, r6, #4
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	6838      	ldr	r0, [r7, #0]
 80015d0:	f002 face 	bl	8003b70 <USB_DevInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00d      	b.n	8001602 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fc1d 	bl	8004e3a <USB_DevDisconnect>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800160a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_PCD_Start+0x1c>
 8001622:	2302      	movs	r3, #2
 8001624:	e020      	b.n	8001668 <HAL_PCD_Start+0x5e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	2b01      	cmp	r3, #1
 8001634:	d109      	bne.n	800164a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800163a:	2b01      	cmp	r3, #1
 800163c:	d005      	beq.n	800164a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fa20 	bl	8003a94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 fbcd 	bl	8004df8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b08d      	sub	sp, #52	; 0x34
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fc8b 	bl	8004fa2 <USB_GetMode>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 848a 	bne.w	8001fa8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fbef 	bl	8004e7c <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8480 	beq.w	8001fa6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fbdc 	bl	8004e7c <USB_ReadInterrupts>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d107      	bne.n	80016de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 0202 	and.w	r2, r2, #2
 80016dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fbca 	bl	8004e7c <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d161      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0210 	bic.w	r2, r2, #16
 8001700:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 020f 	and.w	r2, r3, #15
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	3304      	adds	r3, #4
 8001720:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	0c5b      	lsrs	r3, r3, #17
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	2b02      	cmp	r3, #2
 800172c:	d124      	bne.n	8001778 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d035      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001748:	b29b      	uxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	6a38      	ldr	r0, [r7, #32]
 800174e:	f003 fa01 	bl	8004b54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800175e:	441a      	add	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001770:	441a      	add	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	621a      	str	r2, [r3, #32]
 8001776:	e016      	b.n	80017a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	0c5b      	lsrs	r3, r3, #17
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	2b06      	cmp	r3, #6
 8001782:	d110      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800178a:	2208      	movs	r2, #8
 800178c:	4619      	mov	r1, r3
 800178e:	6a38      	ldr	r0, [r7, #32]
 8001790:	f003 f9e0 	bl	8004b54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a0:	441a      	add	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0210 	orr.w	r2, r2, #16
 80017b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fb5e 	bl	8004e7c <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ca:	f040 80a7 	bne.w	800191c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fb63 	bl	8004ea2 <USB_ReadDevAllOutEpInterrupt>
 80017dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017de:	e099      	b.n	8001914 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 808e 	beq.w	8001908 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 fb87 	bl	8004f0a <USB_ReadDevOutEPInterrupt>
 80017fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001814:	461a      	mov	r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800181a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fec3 	bl	80025a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00c      	beq.n	8001846 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001838:	461a      	mov	r2, r3
 800183a:	2308      	movs	r3, #8
 800183c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800183e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 ff99 	bl	8002778 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185c:	461a      	mov	r2, r3
 800185e:	2310      	movs	r3, #16
 8001860:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d030      	beq.n	80018ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	2b80      	cmp	r3, #128	; 0x80
 8001876:	d109      	bne.n	800188c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d108      	bne.n	80018bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f005 fe9e 	bl	80075f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c8:	461a      	mov	r2, r3
 80018ca:	2302      	movs	r3, #2
 80018cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e4:	461a      	mov	r2, r3
 80018e6:	2320      	movs	r3, #32
 80018e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001900:	461a      	mov	r2, r3
 8001902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001906:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	f47f af62 	bne.w	80017e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 faab 	bl	8004e7c <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001930:	f040 80db 	bne.w	8001aea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 facc 	bl	8004ed6 <USB_ReadDevAllInEpInterrupt>
 800193e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001944:	e0cd      	b.n	8001ae2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80c2 	beq.w	8001ad6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f003 faf2 	bl	8004f46 <USB_ReadDevInEPInterrupt>
 8001962:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d057      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	2201      	movs	r2, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	69f9      	ldr	r1, [r7, #28]
 800198a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800198e:	4013      	ands	r3, r2
 8001990:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800199e:	461a      	mov	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d132      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	334c      	adds	r3, #76	; 0x4c
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4403      	add	r3, r0
 80019cc:	3348      	adds	r3, #72	; 0x48
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4419      	add	r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4403      	add	r3, r0
 80019e0:	334c      	adds	r3, #76	; 0x4c
 80019e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d113      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x3a2>
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	3354      	adds	r3, #84	; 0x54
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d108      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	f003 faf9 	bl	8005004 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f005 fd68 	bl	80074ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	015a      	lsls	r2, r3, #5
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a34:	461a      	mov	r2, r3
 8001a36:	2308      	movs	r3, #8
 8001a38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a50:	461a      	mov	r2, r3
 8001a52:	2310      	movs	r3, #16
 8001a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a7e:	6a38      	ldr	r0, [r7, #32]
 8001a80:	f002 f9da 	bl	8003e38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	3338      	adds	r3, #56	; 0x38
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	3304      	adds	r3, #4
 8001a96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	78db      	ldrb	r3, [r3, #3]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f005 fdb5 	bl	800761c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fcdb 	bl	800248c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f af2e 	bne.w	8001946 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f9c4 	bl	8004e7c <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001afe:	d122      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b26:	2100      	movs	r1, #0
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fec3 	bl	80028b4 <HAL_PCDEx_LPM_Callback>
 8001b2e:	e002      	b.n	8001b36 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f005 fd53 	bl	80075dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 f996 	bl	8004e7c <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b5a:	d112      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d102      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f005 fd0f 	bl	8007590 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b80:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 f978 	bl	8004e7c <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b96:	f040 80b7 	bne.w	8001d08 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 f93f 	bl	8003e38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbe:	e046      	b.n	8001c4e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c00:	461a      	mov	r2, r3
 8001c02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c18:	0151      	lsls	r1, r2, #5
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c38:	0151      	lsls	r1, r2, #5
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	440a      	add	r2, r1
 8001c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d3b3      	bcc.n	8001bc0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d016      	beq.n	8001ca2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c84:	f043 030b 	orr.w	r3, r3, #11
 8001c88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9a:	f043 030b 	orr.w	r3, r3, #11
 8001c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca0:	e015      	b.n	8001cce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cb4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cb8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc8:	f043 030b 	orr.w	r3, r3, #11
 8001ccc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ce0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f003 f986 	bl	8005004 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 f8b5 	bl	8004e7c <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1c:	d124      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 f94b 	bl	8004fbe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 f900 	bl	8003f32 <USB_GetDevSpeed>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681c      	ldr	r4, [r3, #0]
 8001d3e:	f001 fa27 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 8001d42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f001 fdff 	bl	8003950 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f005 fbf3 	bl	800753e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f885 	bl	8004e7c <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d10a      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f005 fbd0 	bl	8007522 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f002 0208 	and.w	r2, r2, #8
 8001d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f870 	bl	8004e7c <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d122      	bne.n	8001dec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db2:	2301      	movs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	e014      	b.n	8001de2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fb27 	bl	800242a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	3301      	adds	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3e5      	bcc.n	8001db8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 f843 	bl	8004e7c <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e00:	d13b      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	e02b      	b.n	8001e60 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3340      	adds	r3, #64	; 0x40
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d115      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da12      	bge.n	8001e5a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	333f      	adds	r3, #63	; 0x3f
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fae8 	bl	800242a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d3ce      	bcc.n	8001e08 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fffc 	bl	8004e7c <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e8e:	d155      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e90:	2301      	movs	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
 8001e94:	e045      	b.n	8001f22 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12e      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ebe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da2b      	bge.n	8001f1c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ed0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d121      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10a      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f18:	6053      	str	r3, [r2, #4]
            break;
 8001f1a:	e007      	b.n	8001f2c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3301      	adds	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3b4      	bcc.n	8001e96 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 ff9b 	bl	8004e7c <USB_ReadInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d10a      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f005 fb74 	bl	8007640 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 ff85 	bl	8004e7c <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d115      	bne.n	8001fa8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f005 fb64 	bl	800765c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	e000      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x938>
      return;
 8001fa6:	bf00      	nop
    }
  }
}
 8001fa8:	3734      	adds	r7, #52	; 0x34
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}

08001fae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_PCD_SetAddress+0x1a>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e013      	b.n	8001ff0 <HAL_PCD_SetAddress+0x42>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fee3 	bl	8004dac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	70fb      	strb	r3, [r7, #3]
 800200a:	460b      	mov	r3, r1
 800200c:	803b      	strh	r3, [r7, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da0f      	bge.n	800203e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3338      	adds	r3, #56	; 0x38
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	705a      	strb	r2, [r3, #1]
 800203c:	e00f      	b.n	800205e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 020f 	and.w	r2, r3, #15
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800206a:	883a      	ldrh	r2, [r7, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	78ba      	ldrb	r2, [r7, #2]
 8002074:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002088:	78bb      	ldrb	r3, [r7, #2]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d102      	bne.n	8002094 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_PCD_EP_Open+0xaa>
 800209e:	2302      	movs	r3, #2
 80020a0:	e00e      	b.n	80020c0 <HAL_PCD_EP_Open+0xc8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68f9      	ldr	r1, [r7, #12]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 ff63 	bl	8003f7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020be:	7afb      	ldrb	r3, [r7, #11]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da0f      	bge.n	80020fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3338      	adds	r3, #56	; 0x38
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	705a      	strb	r2, [r3, #1]
 80020fa:	e00f      	b.n	800211c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 020f 	and.w	r2, r3, #15
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_PCD_EP_Close+0x6e>
 8002132:	2302      	movs	r3, #2
 8002134:	e00e      	b.n	8002154 <HAL_PCD_EP_Close+0x8c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	4618      	mov	r0, r3
 8002146:	f001 ffa1 	bl	800408c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2200      	movs	r2, #0
 800219c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6979      	ldr	r1, [r7, #20]
 80021d0:	f002 fa80 	bl	80046d4 <USB_EP0StartXfer>
 80021d4:	e008      	b.n	80021e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	6979      	ldr	r1, [r7, #20]
 80021e4:	f002 f82e 	bl	8004244 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 020f 	and.w	r2, r3, #15
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002214:	681b      	ldr	r3, [r3, #0]
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	460b      	mov	r3, r1
 8002230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	3338      	adds	r3, #56	; 0x38
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	3304      	adds	r3, #4
 8002248:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2201      	movs	r2, #1
 8002260:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	b2da      	uxtb	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6979      	ldr	r1, [r7, #20]
 8002294:	f002 fa1e 	bl	80046d4 <USB_EP0StartXfer>
 8002298:	e008      	b.n	80022ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6979      	ldr	r1, [r7, #20]
 80022a8:	f001 ffcc 	bl	8004244 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d901      	bls.n	80022d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e050      	b.n	8002376 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da0f      	bge.n	80022fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	3338      	adds	r3, #56	; 0x38
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	705a      	strb	r2, [r3, #1]
 80022fa:	e00d      	b.n	8002318 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_PCD_EP_SetStall+0x82>
 8002334:	2302      	movs	r3, #2
 8002336:	e01e      	b.n	8002376 <HAL_PCD_EP_SetStall+0xc0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fc5c 	bl	8004c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	b2d9      	uxtb	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002366:	461a      	mov	r2, r3
 8002368:	f002 fe4c 	bl	8005004 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d901      	bls.n	800239c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e042      	b.n	8002422 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0f      	bge.n	80023c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 020f 	and.w	r2, r3, #15
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	3338      	adds	r3, #56	; 0x38
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
 80023c2:	e00f      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_EP_ClrStall+0x86>
 8002400:	2302      	movs	r3, #2
 8002402:	e00e      	b.n	8002422 <HAL_PCD_EP_ClrStall+0xa4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	f002 fc64 	bl	8004ce0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da0c      	bge.n	8002458 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 020f 	and.w	r2, r3, #15
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	3338      	adds	r3, #56	; 0x38
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e00c      	b.n	8002472 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68f9      	ldr	r1, [r7, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fa83 	bl	8004984 <USB_EPStopXfer>
 800247e:	4603      	mov	r3, r0
 8002480:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002482:	7afb      	ldrb	r3, [r7, #11]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af02      	add	r7, sp, #8
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	3338      	adds	r3, #56	; 0x38
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d901      	bls.n	80024c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e06c      	b.n	800259e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d902      	bls.n	80024e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3303      	adds	r3, #3
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024e8:	e02b      	b.n	8002542 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d902      	bls.n	8002506 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3303      	adds	r3, #3
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800251e:	b2db      	uxtb	r3, r3
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4603      	mov	r3, r0
 8002524:	6978      	ldr	r0, [r7, #20]
 8002526:	f002 fad7 	bl	8004ad8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	441a      	add	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	441a      	add	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	b29b      	uxth	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	429a      	cmp	r2, r3
 8002556:	d809      	bhi.n	800256c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002560:	429a      	cmp	r2, r3
 8002562:	d203      	bcs.n	800256c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1be      	bne.n	80024ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d811      	bhi.n	800259c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2201      	movs	r2, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	43db      	mvns	r3, r3
 8002592:	6939      	ldr	r1, [r7, #16]
 8002594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002598:	4013      	ands	r3, r2
 800259a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	333c      	adds	r3, #60	; 0x3c
 80025c0:	3304      	adds	r3, #4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d17b      	bne.n	80026d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4a61      	ldr	r2, [pc, #388]	; (8002770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f240 80b9 	bls.w	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80b3 	beq.w	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	461a      	mov	r2, r3
 800260c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002610:	6093      	str	r3, [r2, #8]
 8002612:	e0a7      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262a:	461a      	mov	r2, r3
 800262c:	2320      	movs	r3, #32
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	e098      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8093 	bne.w	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4a4b      	ldr	r2, [pc, #300]	; (8002770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d90f      	bls.n	8002666 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	6093      	str	r3, [r2, #8]
 8002664:	e07e      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	440b      	add	r3, r1
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d114      	bne.n	80026c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026b0:	461a      	mov	r2, r3
 80026b2:	2101      	movs	r1, #1
 80026b4:	f002 fca6 	bl	8005004 <USB_EP0_OutStart>
 80026b8:	e006      	b.n	80026c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f004 fef2 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
 80026d4:	e046      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4a26      	ldr	r2, [pc, #152]	; (8002774 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d124      	bne.n	8002728 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f4:	461a      	mov	r2, r3
 80026f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e032      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2320      	movs	r3, #32
 8002718:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f004 fec9 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
 8002726:	e01d      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d114      	bne.n	8002758 <PCD_EP_OutXfrComplete_int+0x1b0>
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002750:	461a      	mov	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f002 fc56 	bl	8005004 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f004 feaa 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	4f54300a 	.word	0x4f54300a
 8002774:	4f54310a 	.word	0x4f54310a

08002778 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	333c      	adds	r3, #60	; 0x3c
 8002790:	3304      	adds	r3, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a15      	ldr	r2, [pc, #84]	; (8002800 <PCD_EP_OutSetupPacket_int+0x88>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d90e      	bls.n	80027cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f004 fe61 	bl	8007494 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <PCD_EP_OutSetupPacket_int+0x88>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d90c      	bls.n	80027f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d108      	bne.n	80027f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027ec:	461a      	mov	r2, r3
 80027ee:	2101      	movs	r1, #1
 80027f0:	f002 fc08 	bl	8005004 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	4f54300a 	.word	0x4f54300a

08002804 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
 8002810:	4613      	mov	r3, r2
 8002812:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002822:	883b      	ldrh	r3, [r7, #0]
 8002824:	0419      	lsls	r1, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	430a      	orrs	r2, r1
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	e028      	b.n	8002884 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4413      	add	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e00d      	b.n	8002862 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	3340      	adds	r3, #64	; 0x40
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	4413      	add	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3301      	adds	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	3b01      	subs	r3, #1
 8002868:	429a      	cmp	r2, r3
 800286a:	d3ec      	bcc.n	8002846 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800286c:	883b      	ldrh	r3, [r7, #0]
 800286e:	0418      	lsls	r0, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	3b01      	subs	r3, #1
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	4302      	orrs	r2, r0
 800287c:	3340      	adds	r3, #64	; 0x40
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e267      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d075      	beq.n	80029d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ea:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d00c      	beq.n	8002910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f6:	4b85      	ldr	r3, [pc, #532]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d112      	bne.n	8002928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002902:	4b82      	ldr	r3, [pc, #520]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290e:	d10b      	bne.n	8002928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05b      	beq.n	80029d4 <HAL_RCC_OscConfig+0x108>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d157      	bne.n	80029d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e242      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x74>
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a75      	ldr	r2, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0xb0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x98>
 800294a:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6c      	ldr	r2, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xb0>
 8002964:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a68      	ldr	r2, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe f8e8 	bl	8000b58 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe f8e4 	bl	8000b58 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e207      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xc0>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe f8d4 	bl	8000b58 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe f8d0 	bl	8000b58 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1f3      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0xe8>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d063      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fa:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x152>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1c7      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4937      	ldr	r1, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	e03a      	b.n	8002aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3c:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCC_OscConfig+0x244>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe f889 	bl	8000b58 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7fe f885 	bl	8000b58 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1a8      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4925      	ldr	r1, [pc, #148]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_OscConfig+0x244>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe f868 	bl	8000b58 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8c:	f7fe f864 	bl	8000b58 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e187      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d036      	beq.n	8002b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d016      	beq.n	8002aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_RCC_OscConfig+0x248>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f848 	bl	8000b58 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002acc:	f7fe f844 	bl	8000b58 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e167      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x200>
 8002aea:	e01b      	b.n	8002b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_OscConfig+0x248>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe f831 	bl	8000b58 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	e00e      	b.n	8002b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afa:	f7fe f82d 	bl	8000b58 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d907      	bls.n	8002b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e150      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	42470000 	.word	0x42470000
 8002b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ea      	bne.n	8002afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8097 	beq.w	8002c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10f      	bne.n	8002b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	4b7d      	ldr	r3, [pc, #500]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a7c      	ldr	r2, [pc, #496]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b7a      	ldr	r3, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	4b77      	ldr	r3, [pc, #476]	; (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d118      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6e:	4b74      	ldr	r3, [pc, #464]	; (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a73      	ldr	r2, [pc, #460]	; (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7a:	f7fd ffed 	bl	8000b58 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fd ffe9 	bl	8000b58 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e10c      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2ea>
 8002ba8:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x324>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x30c>
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bca:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a5b      	ldr	r2, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x324>
 8002bd8:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
 8002be4:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fd ffae 	bl	8000b58 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7fd ffaa 	bl	8000b58 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0cb      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ee      	beq.n	8002c00 <HAL_RCC_OscConfig+0x334>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fd ff98 	bl	8000b58 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fd ff94 	bl	8000b58 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0b5      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ee      	bne.n	8002c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c54:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	4a38      	ldr	r2, [pc, #224]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a1 	beq.w	8002dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d05c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d141      	bne.n	8002d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fd ff68 	bl	8000b58 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fd ff64 	bl	8000b58 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e087      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	491b      	ldr	r1, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x478>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fd ff3d 	bl	8000b58 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fd ff39 	bl	8000b58 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e05c      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x416>
 8002d00:	e054      	b.n	8002dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x478>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fd ff26 	bl	8000b58 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fd ff22 	bl	8000b58 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e045      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x444>
 8002d2e:	e03d      	b.n	8002dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e038      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000
 8002d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x4ec>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d028      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d121      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d11a      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d111      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800

08002dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0cc      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d90c      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b8      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e10:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e28:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	494d      	ldr	r1, [pc, #308]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d044      	beq.n	8002edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d119      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e06f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e067      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4934      	ldr	r1, [pc, #208]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eac:	f7fd fe54 	bl	8000b58 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7fd fe50 	bl	8000b58 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e04f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 020c 	and.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1eb      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d20c      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e032      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4916      	ldr	r1, [pc, #88]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f42:	f000 f821 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490a      	ldr	r1, [pc, #40]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fdb4 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023c00 	.word	0x40023c00
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	08007acc 	.word	0x08007acc
 8002f80:	20000000 	.word	0x20000000
 8002f84:	20000004 	.word	0x20000004

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b094      	sub	sp, #80	; 0x50
 8002f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	647b      	str	r3, [r7, #68]	; 0x44
 8002f94:	2300      	movs	r3, #0
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f98:	2300      	movs	r3, #0
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa0:	4b79      	ldr	r3, [pc, #484]	; (8003188 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d00d      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	f200 80e1 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x34>
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fba:	e0db      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b73      	ldr	r3, [pc, #460]	; (800318c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fc0:	e0db      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc6:	e0d8      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d063      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	0159      	lsls	r1, r3, #5
 8003008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300c:	0150      	lsls	r0, r2, #5
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4621      	mov	r1, r4
 8003014:	1a51      	subs	r1, r2, r1
 8003016:	6139      	str	r1, [r7, #16]
 8003018:	4629      	mov	r1, r5
 800301a:	eb63 0301 	sbc.w	r3, r3, r1
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800302c:	4659      	mov	r1, fp
 800302e:	018b      	lsls	r3, r1, #6
 8003030:	4651      	mov	r1, sl
 8003032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003036:	4651      	mov	r1, sl
 8003038:	018a      	lsls	r2, r1, #6
 800303a:	4651      	mov	r1, sl
 800303c:	ebb2 0801 	subs.w	r8, r2, r1
 8003040:	4659      	mov	r1, fp
 8003042:	eb63 0901 	sbc.w	r9, r3, r1
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305a:	4690      	mov	r8, r2
 800305c:	4699      	mov	r9, r3
 800305e:	4623      	mov	r3, r4
 8003060:	eb18 0303 	adds.w	r3, r8, r3
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	462b      	mov	r3, r5
 8003068:	eb49 0303 	adc.w	r3, r9, r3
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800307a:	4629      	mov	r1, r5
 800307c:	028b      	lsls	r3, r1, #10
 800307e:	4621      	mov	r1, r4
 8003080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003084:	4621      	mov	r1, r4
 8003086:	028a      	lsls	r2, r1, #10
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308e:	2200      	movs	r2, #0
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
 8003092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003098:	f7fd f896 	bl	80001c8 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a4:	e058      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	2200      	movs	r2, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	4611      	mov	r1, r2
 80030b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b6:	623b      	str	r3, [r7, #32]
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	f04f 0000 	mov.w	r0, #0
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	0159      	lsls	r1, r3, #5
 80030ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d2:	0150      	lsls	r0, r2, #5
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4641      	mov	r1, r8
 80030da:	ebb2 0a01 	subs.w	sl, r2, r1
 80030de:	4649      	mov	r1, r9
 80030e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f8:	ebb2 040a 	subs.w	r4, r2, sl
 80030fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	00eb      	lsls	r3, r5, #3
 800310a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310e:	00e2      	lsls	r2, r4, #3
 8003110:	4614      	mov	r4, r2
 8003112:	461d      	mov	r5, r3
 8003114:	4643      	mov	r3, r8
 8003116:	18e3      	adds	r3, r4, r3
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	464b      	mov	r3, r9
 800311c:	eb45 0303 	adc.w	r3, r5, r3
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312e:	4629      	mov	r1, r5
 8003130:	028b      	lsls	r3, r1, #10
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003138:	4621      	mov	r1, r4
 800313a:	028a      	lsls	r2, r1, #10
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003142:	2200      	movs	r2, #0
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	61fa      	str	r2, [r7, #28]
 8003148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314c:	f7fd f83c 	bl	80001c8 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_GetSysClockFreq+0x200>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	3301      	adds	r3, #1
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800316a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003172:	e002      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetSysClockFreq+0x204>)
 8003176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800317c:	4618      	mov	r0, r3
 800317e:	3750      	adds	r7, #80	; 0x50
 8003180:	46bd      	mov	sp, r7
 8003182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	00f42400 	.word	0x00f42400

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08007adc 	.word	0x08007adc

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffdc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08007adc 	.word	0x08007adc

080031f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07b      	b.n	8003302 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321a:	d009      	beq.n	8003230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]
 8003222:	e005      	b.n	8003230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fb1e 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003266:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	ea42 0103 	orr.w	r1, r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0104 	and.w	r1, r3, #4
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0210 	and.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e03f      	b.n	800339c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd faf3 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2224      	movs	r2, #36	; 0x24
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f828 	bl	80033a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003362:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003372:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003382:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a8:	b0c0      	sub	sp, #256	; 0x100
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	68d9      	ldr	r1, [r3, #12]
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	ea40 0301 	orr.w	r3, r0, r1
 80033cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	431a      	orrs	r2, r3
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033fc:	f021 010c 	bic.w	r1, r1, #12
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800340a:	430b      	orrs	r3, r1
 800340c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800340e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	6999      	ldr	r1, [r3, #24]
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	ea40 0301 	orr.w	r3, r0, r1
 800342a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b8f      	ldr	r3, [pc, #572]	; (8003670 <UART_SetConfig+0x2cc>)
 8003434:	429a      	cmp	r2, r3
 8003436:	d005      	beq.n	8003444 <UART_SetConfig+0xa0>
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <UART_SetConfig+0x2d0>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d104      	bne.n	800344e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003444:	f7ff fec4 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8003448:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800344c:	e003      	b.n	8003456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800344e:	f7ff feab 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8003452:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	f040 810c 	bne.w	800367c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800346e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003476:	4622      	mov	r2, r4
 8003478:	462b      	mov	r3, r5
 800347a:	1891      	adds	r1, r2, r2
 800347c:	65b9      	str	r1, [r7, #88]	; 0x58
 800347e:	415b      	adcs	r3, r3
 8003480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003486:	4621      	mov	r1, r4
 8003488:	eb12 0801 	adds.w	r8, r2, r1
 800348c:	4629      	mov	r1, r5
 800348e:	eb43 0901 	adc.w	r9, r3, r1
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a6:	4690      	mov	r8, r2
 80034a8:	4699      	mov	r9, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	eb18 0303 	adds.w	r3, r8, r3
 80034b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034b4:	462b      	mov	r3, r5
 80034b6:	eb49 0303 	adc.w	r3, r9, r3
 80034ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034d2:	460b      	mov	r3, r1
 80034d4:	18db      	adds	r3, r3, r3
 80034d6:	653b      	str	r3, [r7, #80]	; 0x50
 80034d8:	4613      	mov	r3, r2
 80034da:	eb42 0303 	adc.w	r3, r2, r3
 80034de:	657b      	str	r3, [r7, #84]	; 0x54
 80034e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034e8:	f7fc fe6e 	bl	80001c8 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b61      	ldr	r3, [pc, #388]	; (8003678 <UART_SetConfig+0x2d4>)
 80034f2:	fba3 2302 	umull	r2, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	011c      	lsls	r4, r3, #4
 80034fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003504:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	1891      	adds	r1, r2, r2
 8003512:	64b9      	str	r1, [r7, #72]	; 0x48
 8003514:	415b      	adcs	r3, r3
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800351c:	4641      	mov	r1, r8
 800351e:	eb12 0a01 	adds.w	sl, r2, r1
 8003522:	4649      	mov	r1, r9
 8003524:	eb43 0b01 	adc.w	fp, r3, r1
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353c:	4692      	mov	sl, r2
 800353e:	469b      	mov	fp, r3
 8003540:	4643      	mov	r3, r8
 8003542:	eb1a 0303 	adds.w	r3, sl, r3
 8003546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800354a:	464b      	mov	r3, r9
 800354c:	eb4b 0303 	adc.w	r3, fp, r3
 8003550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003560:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
 8003576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800357a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800357e:	f7fc fe23 	bl	80001c8 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4611      	mov	r1, r2
 8003588:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <UART_SetConfig+0x2d4>)
 800358a:	fba3 2301 	umull	r2, r3, r3, r1
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2264      	movs	r2, #100	; 0x64
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	1acb      	subs	r3, r1, r3
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <UART_SetConfig+0x2d4>)
 80035a0:	fba3 2302 	umull	r2, r3, r3, r2
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ac:	441c      	add	r4, r3
 80035ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	1891      	adds	r1, r2, r2
 80035c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c8:	415b      	adcs	r3, r3
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035d0:	4641      	mov	r1, r8
 80035d2:	1851      	adds	r1, r2, r1
 80035d4:	6339      	str	r1, [r7, #48]	; 0x30
 80035d6:	4649      	mov	r1, r9
 80035d8:	414b      	adcs	r3, r1
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035e8:	4659      	mov	r1, fp
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4651      	mov	r1, sl
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4642      	mov	r2, r8
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003604:	464b      	mov	r3, r9
 8003606:	460a      	mov	r2, r1
 8003608:	eb42 0303 	adc.w	r3, r2, r3
 800360c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800361c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003624:	460b      	mov	r3, r1
 8003626:	18db      	adds	r3, r3, r3
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	4613      	mov	r3, r2
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800363a:	f7fc fdc5 	bl	80001c8 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <UART_SetConfig+0x2d4>)
 8003644:	fba3 1302 	umull	r1, r3, r3, r2
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	2164      	movs	r1, #100	; 0x64
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	3332      	adds	r3, #50	; 0x32
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <UART_SetConfig+0x2d4>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	f003 0207 	and.w	r2, r3, #7
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4422      	add	r2, r4
 800366a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800366c:	e105      	b.n	800387a <UART_SetConfig+0x4d6>
 800366e:	bf00      	nop
 8003670:	40011000 	.word	0x40011000
 8003674:	40011400 	.word	0x40011400
 8003678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800367c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003680:	2200      	movs	r2, #0
 8003682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800368a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	1891      	adds	r1, r2, r2
 8003694:	6239      	str	r1, [r7, #32]
 8003696:	415b      	adcs	r3, r3
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800369e:	4641      	mov	r1, r8
 80036a0:	1854      	adds	r4, r2, r1
 80036a2:	4649      	mov	r1, r9
 80036a4:	eb43 0501 	adc.w	r5, r3, r1
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	00eb      	lsls	r3, r5, #3
 80036b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b6:	00e2      	lsls	r2, r4, #3
 80036b8:	4614      	mov	r4, r2
 80036ba:	461d      	mov	r5, r3
 80036bc:	4643      	mov	r3, r8
 80036be:	18e3      	adds	r3, r4, r3
 80036c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036c4:	464b      	mov	r3, r9
 80036c6:	eb45 0303 	adc.w	r3, r5, r3
 80036ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036ea:	4629      	mov	r1, r5
 80036ec:	008b      	lsls	r3, r1, #2
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f4:	4621      	mov	r1, r4
 80036f6:	008a      	lsls	r2, r1, #2
 80036f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036fc:	f7fc fd64 	bl	80001c8 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4b60      	ldr	r3, [pc, #384]	; (8003888 <UART_SetConfig+0x4e4>)
 8003706:	fba3 2302 	umull	r2, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	011c      	lsls	r4, r3, #4
 800370e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003712:	2200      	movs	r2, #0
 8003714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800371c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	1891      	adds	r1, r2, r2
 8003726:	61b9      	str	r1, [r7, #24]
 8003728:	415b      	adcs	r3, r3
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003730:	4641      	mov	r1, r8
 8003732:	1851      	adds	r1, r2, r1
 8003734:	6139      	str	r1, [r7, #16]
 8003736:	4649      	mov	r1, r9
 8003738:	414b      	adcs	r3, r1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003748:	4659      	mov	r1, fp
 800374a:	00cb      	lsls	r3, r1, #3
 800374c:	4651      	mov	r1, sl
 800374e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003752:	4651      	mov	r1, sl
 8003754:	00ca      	lsls	r2, r1, #3
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	4603      	mov	r3, r0
 800375c:	4642      	mov	r2, r8
 800375e:	189b      	adds	r3, r3, r2
 8003760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003764:	464b      	mov	r3, r9
 8003766:	460a      	mov	r2, r1
 8003768:	eb42 0303 	adc.w	r3, r2, r3
 800376c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	67bb      	str	r3, [r7, #120]	; 0x78
 800377a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003788:	4649      	mov	r1, r9
 800378a:	008b      	lsls	r3, r1, #2
 800378c:	4641      	mov	r1, r8
 800378e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003792:	4641      	mov	r1, r8
 8003794:	008a      	lsls	r2, r1, #2
 8003796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800379a:	f7fc fd15 	bl	80001c8 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <UART_SetConfig+0x4e4>)
 80037a4:	fba3 1302 	umull	r1, r3, r3, r2
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	2164      	movs	r1, #100	; 0x64
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	3332      	adds	r3, #50	; 0x32
 80037b6:	4a34      	ldr	r2, [pc, #208]	; (8003888 <UART_SetConfig+0x4e4>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c2:	441c      	add	r4, r3
 80037c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c8:	2200      	movs	r2, #0
 80037ca:	673b      	str	r3, [r7, #112]	; 0x70
 80037cc:	677a      	str	r2, [r7, #116]	; 0x74
 80037ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	415b      	adcs	r3, r3
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e2:	4641      	mov	r1, r8
 80037e4:	1851      	adds	r1, r2, r1
 80037e6:	6039      	str	r1, [r7, #0]
 80037e8:	4649      	mov	r1, r9
 80037ea:	414b      	adcs	r3, r1
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037fa:	4659      	mov	r1, fp
 80037fc:	00cb      	lsls	r3, r1, #3
 80037fe:	4651      	mov	r1, sl
 8003800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003804:	4651      	mov	r1, sl
 8003806:	00ca      	lsls	r2, r1, #3
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	4603      	mov	r3, r0
 800380e:	4642      	mov	r2, r8
 8003810:	189b      	adds	r3, r3, r2
 8003812:	66bb      	str	r3, [r7, #104]	; 0x68
 8003814:	464b      	mov	r3, r9
 8003816:	460a      	mov	r2, r1
 8003818:	eb42 0303 	adc.w	r3, r2, r3
 800381c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
 8003828:	667a      	str	r2, [r7, #100]	; 0x64
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003836:	4649      	mov	r1, r9
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4641      	mov	r1, r8
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4641      	mov	r1, r8
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003848:	f7fc fcbe 	bl	80001c8 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <UART_SetConfig+0x4e4>)
 8003852:	fba3 1302 	umull	r1, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2164      	movs	r1, #100	; 0x64
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	3332      	adds	r3, #50	; 0x32
 8003864:	4a08      	ldr	r2, [pc, #32]	; (8003888 <UART_SetConfig+0x4e4>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4422      	add	r2, r4
 8003878:	609a      	str	r2, [r3, #8]
}
 800387a:	bf00      	nop
 800387c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003880:	46bd      	mov	sp, r7
 8003882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003886:	bf00      	nop
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800388c:	b084      	sub	sp, #16
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	f107 001c 	add.w	r0, r7, #28
 800389a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d122      	bne.n	80038ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f001 fbee 	bl	80050c0 <USB_CoreReset>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e01a      	b.n	8003920 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 fbe2 	bl	80050c0 <USB_CoreReset>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
 8003912:	e005      	b.n	8003920 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10b      	bne.n	800393e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f043 0206 	orr.w	r2, r3, #6
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800394a:	b004      	add	sp, #16
 800394c:	4770      	bx	lr
	...

08003950 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d165      	bne.n	8003a30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4a41      	ldr	r2, [pc, #260]	; (8003a6c <USB_SetTurnaroundTime+0x11c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d906      	bls.n	800397a <USB_SetTurnaroundTime+0x2a>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a40      	ldr	r2, [pc, #256]	; (8003a70 <USB_SetTurnaroundTime+0x120>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d202      	bcs.n	800397a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003974:	230f      	movs	r3, #15
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e062      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <USB_SetTurnaroundTime+0x120>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d306      	bcc.n	8003990 <USB_SetTurnaroundTime+0x40>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a3b      	ldr	r2, [pc, #236]	; (8003a74 <USB_SetTurnaroundTime+0x124>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d202      	bcs.n	8003990 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800398a:	230e      	movs	r3, #14
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e057      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4a38      	ldr	r2, [pc, #224]	; (8003a74 <USB_SetTurnaroundTime+0x124>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d306      	bcc.n	80039a6 <USB_SetTurnaroundTime+0x56>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4a37      	ldr	r2, [pc, #220]	; (8003a78 <USB_SetTurnaroundTime+0x128>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d202      	bcs.n	80039a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039a0:	230d      	movs	r3, #13
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e04c      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <USB_SetTurnaroundTime+0x128>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d306      	bcc.n	80039bc <USB_SetTurnaroundTime+0x6c>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a32      	ldr	r2, [pc, #200]	; (8003a7c <USB_SetTurnaroundTime+0x12c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039b6:	230c      	movs	r3, #12
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e041      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <USB_SetTurnaroundTime+0x12c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d906      	bls.n	80039d2 <USB_SetTurnaroundTime+0x82>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <USB_SetTurnaroundTime+0x130>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d802      	bhi.n	80039d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039cc:	230b      	movs	r3, #11
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e036      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <USB_SetTurnaroundTime+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d906      	bls.n	80039e8 <USB_SetTurnaroundTime+0x98>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <USB_SetTurnaroundTime+0x134>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d802      	bhi.n	80039e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039e2:	230a      	movs	r3, #10
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e02b      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <USB_SetTurnaroundTime+0x134>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d906      	bls.n	80039fe <USB_SetTurnaroundTime+0xae>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <USB_SetTurnaroundTime+0x138>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d202      	bcs.n	80039fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039f8:	2309      	movs	r3, #9
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e020      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <USB_SetTurnaroundTime+0x138>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d306      	bcc.n	8003a14 <USB_SetTurnaroundTime+0xc4>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <USB_SetTurnaroundTime+0x13c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d802      	bhi.n	8003a14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a0e:	2308      	movs	r3, #8
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e015      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <USB_SetTurnaroundTime+0x13c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d906      	bls.n	8003a2a <USB_SetTurnaroundTime+0xda>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <USB_SetTurnaroundTime+0x140>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d202      	bcs.n	8003a2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a24:	2307      	movs	r3, #7
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e00a      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e007      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a36:	2309      	movs	r3, #9
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e001      	b.n	8003a40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a3c:	2309      	movs	r3, #9
 8003a3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	00d8acbf 	.word	0x00d8acbf
 8003a70:	00e4e1c0 	.word	0x00e4e1c0
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	01067380 	.word	0x01067380
 8003a7c:	011a499f 	.word	0x011a499f
 8003a80:	01312cff 	.word	0x01312cff
 8003a84:	014ca43f 	.word	0x014ca43f
 8003a88:	016e3600 	.word	0x016e3600
 8003a8c:	01a6ab1f 	.word	0x01a6ab1f
 8003a90:	01e84800 	.word	0x01e84800

08003a94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0201 	bic.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d115      	bne.n	8003b26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f7fd f832 	bl	8000b70 <HAL_Delay>
      ms++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 fa45 	bl	8004fa2 <USB_GetMode>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d01e      	beq.n	8003b5c <USB_SetCurrentMode+0x84>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b31      	cmp	r3, #49	; 0x31
 8003b22:	d9f0      	bls.n	8003b06 <USB_SetCurrentMode+0x2e>
 8003b24:	e01a      	b.n	8003b5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d115      	bne.n	8003b58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b38:	2001      	movs	r0, #1
 8003b3a:	f7fd f819 	bl	8000b70 <HAL_Delay>
      ms++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f001 fa2c 	bl	8004fa2 <USB_GetMode>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <USB_SetCurrentMode+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b31      	cmp	r3, #49	; 0x31
 8003b54:	d9f0      	bls.n	8003b38 <USB_SetCurrentMode+0x60>
 8003b56:	e001      	b.n	8003b5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e005      	b.n	8003b68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b32      	cmp	r3, #50	; 0x32
 8003b60:	d101      	bne.n	8003b66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b70:	b084      	sub	sp, #16
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	e009      	b.n	8003ba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3340      	adds	r3, #64	; 0x40
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b0e      	cmp	r3, #14
 8003ba8:	d9f2      	bls.n	8003b90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11c      	bne.n	8003bea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
 8003be8:	e00b      	b.n	8003c02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	4619      	mov	r1, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	680b      	ldr	r3, [r1, #0]
 8003c20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10c      	bne.n	8003c42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f965 	bl	8003f00 <USB_SetDevSpeed>
 8003c36:	e008      	b.n	8003c4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c38:	2101      	movs	r1, #1
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f960 	bl	8003f00 <USB_SetDevSpeed>
 8003c40:	e003      	b.n	8003c4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c42:	2103      	movs	r1, #3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f95b 	bl	8003f00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c4a:	2110      	movs	r1, #16
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8f3 	bl	8003e38 <USB_FlushTxFifo>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f91f 	bl	8003ea0 <USB_FlushRxFifo>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	461a      	mov	r2, r3
 8003c74:	2300      	movs	r3, #0
 8003c76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e043      	b.n	8003d1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cac:	d118      	bne.n	8003ce0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	e013      	b.n	8003cf2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e008      	b.n	8003cf2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cec:	461a      	mov	r2, r3
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	461a      	mov	r2, r3
 8003d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3b7      	bcc.n	8003c96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e043      	b.n	8003db4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d42:	d118      	bne.n	8003d76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e013      	b.n	8003d88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e008      	b.n	8003d88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	461a      	mov	r2, r3
 8003d84:	2300      	movs	r3, #0
 8003d86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	2300      	movs	r3, #0
 8003d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	461a      	mov	r2, r3
 8003da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3301      	adds	r3, #1
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3b7      	bcc.n	8003d2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ddc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <USB_DevInit+0x2c4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f043 0208 	orr.w	r2, r3, #8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d107      	bne.n	8003e24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e30:	b004      	add	sp, #16
 8003e32:	4770      	bx	lr
 8003e34:	803c3800 	.word	0x803c3800

08003e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <USB_FlushTxFifo+0x64>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e01b      	b.n	8003e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	daf2      	bge.n	8003e46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	019b      	lsls	r3, r3, #6
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <USB_FlushTxFifo+0x64>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e006      	b.n	8003e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d0f0      	beq.n	8003e70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	00030d40 	.word	0x00030d40

08003ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a11      	ldr	r2, [pc, #68]	; (8003efc <USB_FlushRxFifo+0x5c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e018      	b.n	8003ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	daf2      	bge.n	8003eac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a08      	ldr	r2, [pc, #32]	; (8003efc <USB_FlushRxFifo+0x5c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e006      	b.n	8003ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d0f0      	beq.n	8003ed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	00030d40 	.word	0x00030d40

08003f00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0306 	and.w	r3, r3, #6
 8003f4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
 8003f56:	e00a      	b.n	8003f6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d002      	beq.n	8003f64 <USB_GetDevSpeed+0x32>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d102      	bne.n	8003f6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f64:	2302      	movs	r3, #2
 8003f66:	75fb      	strb	r3, [r7, #23]
 8003f68:	e001      	b.n	8003f6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f6a:	230f      	movs	r3, #15
 8003f6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d13a      	bne.n	800400e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d155      	bne.n	800407c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	791b      	ldrb	r3, [r3, #4]
 8003fea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	059b      	lsls	r3, r3, #22
 8003ff2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e036      	b.n	800407c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402c:	4313      	orrs	r3, r2
 800402e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11a      	bne.n	800407c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004062:	430b      	orrs	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d161      	bne.n	800416c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040be:	d11f      	bne.n	8004100 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	b29b      	uxth	r3, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004120:	4013      	ands	r3, r2
 8004122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	b29b      	uxth	r3, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004144:	4013      	ands	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0159      	lsls	r1, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	440b      	add	r3, r1
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	4619      	mov	r1, r3
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <USB_DeactivateEndpoint+0x1b0>)
 8004166:	4013      	ands	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
 800416a:	e060      	b.n	800422e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800417e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004182:	d11f      	bne.n	80041c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	43db      	mvns	r3, r3
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e4:	4013      	ands	r3, r2
 80041e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	43db      	mvns	r3, r3
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004208:	4013      	ands	r3, r2
 800420a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0159      	lsls	r1, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	440b      	add	r3, r1
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	4619      	mov	r1, r3
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <USB_DeactivateEndpoint+0x1b4>)
 800422a:	4013      	ands	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	ec337800 	.word	0xec337800
 8004240:	eff37800 	.word	0xeff37800

08004244 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 815c 	bne.w	800451e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d132      	bne.n	80042d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800428c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	0cdb      	lsrs	r3, r3, #19
 80042ce:	04db      	lsls	r3, r3, #19
 80042d0:	6113      	str	r3, [r2, #16]
 80042d2:	e074      	b.n	80043be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	0cdb      	lsrs	r3, r3, #19
 80042f0:	04db      	lsls	r3, r3, #19
 80042f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6999      	ldr	r1, [r3, #24]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	440b      	add	r3, r1
 8004330:	1e59      	subs	r1, r3, #1
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	fbb1 f3f3 	udiv	r3, r1, r3
 800433a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800433c:	4b9d      	ldr	r3, [pc, #628]	; (80045b4 <USB_EPStartXfer+0x370>)
 800433e:	400b      	ands	r3, r1
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	0148      	lsls	r0, r1, #5
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	4401      	add	r1, r0
 8004348:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	0148      	lsls	r0, r1, #5
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	4401      	add	r1, r0
 800436e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004372:	4313      	orrs	r3, r2
 8004374:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	791b      	ldrb	r3, [r3, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d11f      	bne.n	80043be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800439c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d14b      	bne.n	800445c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	791b      	ldrb	r3, [r3, #4]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d128      	bne.n	800443a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d110      	bne.n	800441a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e00f      	b.n	800443a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004454:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e133      	b.n	80046c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004476:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800447a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	791b      	ldrb	r3, [r3, #4]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d015      	beq.n	80044b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 811b 	beq.w	80046c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	69f9      	ldr	r1, [r7, #28]
 80044a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044aa:	4313      	orrs	r3, r2
 80044ac:	634b      	str	r3, [r1, #52]	; 0x34
 80044ae:	e109      	b.n	80046c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d110      	bne.n	80044e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e00f      	b.n	8004502 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6919      	ldr	r1, [r3, #16]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	b298      	uxth	r0, r3
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4603      	mov	r3, r0
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fade 	bl	8004ad8 <USB_WritePacket>
 800451c:	e0d2      	b.n	80046c4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004538:	0cdb      	lsrs	r3, r3, #19
 800453a:	04db      	lsls	r3, r3, #19
 800453c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800455c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004560:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d126      	bne.n	80045b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	0148      	lsls	r0, r1, #5
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	4401      	add	r1, r0
 8004588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045ae:	6113      	str	r3, [r2, #16]
 80045b0:	e03a      	b.n	8004628 <USB_EPStartXfer+0x3e4>
 80045b2:	bf00      	nop
 80045b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	8afa      	ldrh	r2, [r7, #22]
 80045d4:	fb03 f202 	mul.w	r2, r3, r2
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	8afb      	ldrh	r3, [r7, #22]
 80045ec:	04d9      	lsls	r1, r3, #19
 80045ee:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <USB_EPStartXfer+0x48c>)
 80045f0:	400b      	ands	r3, r1
 80045f2:	69b9      	ldr	r1, [r7, #24]
 80045f4:	0148      	lsls	r0, r1, #5
 80045f6:	69f9      	ldr	r1, [r7, #28]
 80045f8:	4401      	add	r1, r0
 80045fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045fe:	4313      	orrs	r3, r2
 8004600:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	0148      	lsls	r0, r1, #5
 800461c:	69f9      	ldr	r1, [r7, #28]
 800461e:	4401      	add	r1, r0
 8004620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10d      	bne.n	800464a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6919      	ldr	r1, [r3, #16]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	460a      	mov	r2, r1
 8004648:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	791b      	ldrb	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d128      	bne.n	80046a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d110      	bne.n	8004684 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	440a      	add	r2, r1
 8004678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e00f      	b.n	80046a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	1ff80000 	.word	0x1ff80000

080046d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 80ce 	bne.w	8004892 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d132      	bne.n	8004764 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800471c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475c:	0cdb      	lsrs	r3, r3, #19
 800475e:	04db      	lsls	r3, r3, #19
 8004760:	6113      	str	r3, [r2, #16]
 8004762:	e04e      	b.n	8004802 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	0151      	lsls	r1, r2, #5
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	440a      	add	r2, r1
 800477a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477e:	0cdb      	lsrs	r3, r3, #19
 8004780:	04db      	lsls	r3, r3, #19
 8004782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d903      	bls.n	80047bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f2:	6939      	ldr	r1, [r7, #16]
 80047f4:	0148      	lsls	r0, r1, #5
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	4401      	add	r1, r0
 80047fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047fe:	4313      	orrs	r3, r2
 8004800:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d11e      	bne.n	8004846 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	461a      	mov	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	e097      	b.n	8004976 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004864:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8083 	beq.w	8004976 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	6979      	ldr	r1, [r7, #20]
 8004888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488c:	4313      	orrs	r3, r2
 800488e:	634b      	str	r3, [r1, #52]	; 0x34
 8004890:	e071      	b.n	8004976 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ac:	0cdb      	lsrs	r3, r3, #19
 80048ae:	04db      	lsls	r3, r3, #19
 80048b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800490c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004924:	6939      	ldr	r1, [r7, #16]
 8004926:	0148      	lsls	r0, r1, #5
 8004928:	6979      	ldr	r1, [r7, #20]
 800492a:	4401      	add	r1, r0
 800492c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10d      	bne.n	8004956 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6919      	ldr	r1, [r3, #16]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	460a      	mov	r2, r1
 8004954:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004974:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d14a      	bne.n	8004a38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ba:	f040 8086 	bne.w	8004aca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d902      	bls.n	8004a1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
          break;
 8004a1a:	e056      	b.n	8004aca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a34:	d0e7      	beq.n	8004a06 <USB_EPStopXfer+0x82>
 8004a36:	e048      	b.n	8004aca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a50:	d13b      	bne.n	8004aca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d902      	bls.n	8004ab0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
          break;
 8004aae:	e00c      	b.n	8004aca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac8:	d0e7      	beq.n	8004a9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	71fb      	strb	r3, [r7, #7]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d123      	bne.n	8004b46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004afe:	88bb      	ldrh	r3, [r7, #4]
 8004b00:	3303      	adds	r3, #3
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e018      	b.n	8004b3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	031a      	lsls	r2, r3, #12
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b18:	461a      	mov	r2, r3
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d3e2      	bcc.n	8004b0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3724      	adds	r7, #36	; 0x24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b08b      	sub	sp, #44	; 0x2c
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	e014      	b.n	8004baa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	3301      	adds	r3, #1
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	3301      	adds	r3, #1
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	6a3a      	ldr	r2, [r7, #32]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d3e6      	bcc.n	8004b80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004bb2:	8bfb      	ldrh	r3, [r7, #30]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01e      	beq.n	8004bf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f107 0310 	add.w	r3, r7, #16
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	701a      	strb	r2, [r3, #0]
      i++;
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	3301      	adds	r3, #1
 8004be2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	3301      	adds	r3, #1
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004bea:	8bfb      	ldrh	r3, [r7, #30]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bf0:	8bfb      	ldrh	r3, [r7, #30]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ea      	bne.n	8004bcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	372c      	adds	r7, #44	; 0x2c
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d12c      	bne.n	8004c7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	db12      	blt.n	8004c58 <USB_EPSetStall+0x54>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00f      	beq.n	8004c58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e02b      	b.n	8004cd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	db12      	blt.n	8004cb2 <USB_EPSetStall+0xae>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00f      	beq.n	8004cb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d128      	bne.n	8004d4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	791b      	ldrb	r3, [r3, #4]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d003      	beq.n	8004d2c <USB_EPClearStall+0x4c>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	791b      	ldrb	r3, [r3, #4]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d138      	bne.n	8004d9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e027      	b.n	8004d9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d003      	beq.n	8004d7e <USB_EPClearStall+0x9e>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	791b      	ldrb	r3, [r3, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d10f      	bne.n	8004d9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004de0:	68f9      	ldr	r1, [r7, #12]
 8004de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e26:	f023 0302 	bic.w	r3, r3, #2
 8004e2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e54:	f023 0303 	bic.w	r3, r3, #3
 8004e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e94:	68fb      	ldr	r3, [r7, #12]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	b29b      	uxth	r3, r3
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f38:	68bb      	ldr	r3, [r7, #8]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	fa22 f303 	lsr.w	r3, r2, r3
 8004f76:	01db      	lsls	r3, r3, #7
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f94:	68bb      	ldr	r3, [r7, #8]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0301 	and.w	r3, r3, #1
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	460b      	mov	r3, r1
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	333c      	adds	r3, #60	; 0x3c
 800501a:	3304      	adds	r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4a26      	ldr	r2, [pc, #152]	; (80050bc <USB_EP0_OutStart+0xb8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d90a      	bls.n	800503e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005038:	d101      	bne.n	800503e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e037      	b.n	80050ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506c:	f043 0318 	orr.w	r3, r3, #24
 8005070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005080:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005084:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d10f      	bne.n	80050ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80050aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	4f54300a 	.word	0x4f54300a

080050c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a13      	ldr	r2, [pc, #76]	; (8005124 <USB_CoreReset+0x64>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e01b      	b.n	8005116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	daf2      	bge.n	80050cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f043 0201 	orr.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <USB_CoreReset+0x64>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d0f0      	beq.n	80050f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	00030d40 	.word	0x00030d40

08005128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005134:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005138:	f002 fc28 	bl	800798c <USBD_static_malloc>
 800513c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	32b0      	adds	r2, #176	; 0xb0
 800514e:	2100      	movs	r1, #0
 8005150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005154:	2302      	movs	r3, #2
 8005156:	e0d4      	b.n	8005302 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005158:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800515c:	2100      	movs	r1, #0
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f002 fc7c 	bl	8007a5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	32b0      	adds	r2, #176	; 0xb0
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	32b0      	adds	r2, #176	; 0xb0
 800517e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7c1b      	ldrb	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d138      	bne.n	8005202 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005190:	4b5e      	ldr	r3, [pc, #376]	; (800530c <USBD_CDC_Init+0x1e4>)
 8005192:	7819      	ldrb	r1, [r3, #0]
 8005194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005198:	2202      	movs	r2, #2
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f002 fad3 	bl	8007746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <USBD_CDC_Init+0x1e4>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 020f 	and.w	r2, r3, #15
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	2201      	movs	r2, #1
 80051b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051ba:	4b55      	ldr	r3, [pc, #340]	; (8005310 <USBD_CDC_Init+0x1e8>)
 80051bc:	7819      	ldrb	r1, [r3, #0]
 80051be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c2:	2202      	movs	r2, #2
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f002 fabe 	bl	8007746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <USBD_CDC_Init+0x1e8>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	f003 020f 	and.w	r2, r3, #15
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051e2:	2201      	movs	r2, #1
 80051e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80051e6:	4b4b      	ldr	r3, [pc, #300]	; (8005314 <USBD_CDC_Init+0x1ec>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	f003 020f 	and.w	r2, r3, #15
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3326      	adds	r3, #38	; 0x26
 80051fc:	2210      	movs	r2, #16
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e035      	b.n	800526e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005202:	4b42      	ldr	r3, [pc, #264]	; (800530c <USBD_CDC_Init+0x1e4>)
 8005204:	7819      	ldrb	r1, [r3, #0]
 8005206:	2340      	movs	r3, #64	; 0x40
 8005208:	2202      	movs	r2, #2
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f002 fa9b 	bl	8007746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005210:	4b3e      	ldr	r3, [pc, #248]	; (800530c <USBD_CDC_Init+0x1e4>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	3324      	adds	r3, #36	; 0x24
 8005226:	2201      	movs	r2, #1
 8005228:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800522a:	4b39      	ldr	r3, [pc, #228]	; (8005310 <USBD_CDC_Init+0x1e8>)
 800522c:	7819      	ldrb	r1, [r3, #0]
 800522e:	2340      	movs	r3, #64	; 0x40
 8005230:	2202      	movs	r2, #2
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f002 fa87 	bl	8007746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005238:	4b35      	ldr	r3, [pc, #212]	; (8005310 <USBD_CDC_Init+0x1e8>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005250:	2201      	movs	r2, #1
 8005252:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005254:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <USBD_CDC_Init+0x1ec>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	3326      	adds	r3, #38	; 0x26
 800526a:	2210      	movs	r2, #16
 800526c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800526e:	4b29      	ldr	r3, [pc, #164]	; (8005314 <USBD_CDC_Init+0x1ec>)
 8005270:	7819      	ldrb	r1, [r3, #0]
 8005272:	2308      	movs	r3, #8
 8005274:	2203      	movs	r2, #3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f002 fa65 	bl	8007746 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <USBD_CDC_Init+0x1ec>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 020f 	and.w	r2, r3, #15
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	3324      	adds	r3, #36	; 0x24
 8005292:	2201      	movs	r2, #1
 8005294:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	33b0      	adds	r3, #176	; 0xb0
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e018      	b.n	8005302 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c1b      	ldrb	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <USBD_CDC_Init+0x1e8>)
 80052da:	7819      	ldrb	r1, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f002 fb1c 	bl	8007924 <USBD_LL_PrepareReceive>
 80052ec:	e008      	b.n	8005300 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <USBD_CDC_Init+0x1e8>)
 80052f0:	7819      	ldrb	r1, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f002 fb12 	bl	8007924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000093 	.word	0x20000093
 8005310:	20000094 	.word	0x20000094
 8005314:	20000095 	.word	0x20000095

08005318 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005324:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <USBD_CDC_DeInit+0xf8>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f002 fa31 	bl	8007792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005330:	4b37      	ldr	r3, [pc, #220]	; (8005410 <USBD_CDC_DeInit+0xf8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3324      	adds	r3, #36	; 0x24
 8005346:	2200      	movs	r2, #0
 8005348:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800534a:	4b32      	ldr	r3, [pc, #200]	; (8005414 <USBD_CDC_DeInit+0xfc>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f002 fa1e 	bl	8007792 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005356:	4b2f      	ldr	r3, [pc, #188]	; (8005414 <USBD_CDC_DeInit+0xfc>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	f003 020f 	and.w	r2, r3, #15
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800536e:	2200      	movs	r2, #0
 8005370:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005372:	4b29      	ldr	r3, [pc, #164]	; (8005418 <USBD_CDC_DeInit+0x100>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f002 fa0a 	bl	8007792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <USBD_CDC_DeInit+0x100>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f003 020f 	and.w	r2, r3, #15
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3324      	adds	r3, #36	; 0x24
 8005394:	2200      	movs	r2, #0
 8005396:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005398:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <USBD_CDC_DeInit+0x100>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3326      	adds	r3, #38	; 0x26
 80053ae:	2200      	movs	r2, #0
 80053b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	32b0      	adds	r2, #176	; 0xb0
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01f      	beq.n	8005404 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	33b0      	adds	r3, #176	; 0xb0
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	32b0      	adds	r2, #176	; 0xb0
 80053e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f002 fade 	bl	80079a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	32b0      	adds	r2, #176	; 0xb0
 80053f6:	2100      	movs	r1, #0
 80053f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000093 	.word	0x20000093
 8005414:	20000094 	.word	0x20000094
 8005418:	20000095 	.word	0x20000095

0800541c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	32b0      	adds	r2, #176	; 0xb0
 8005430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005434:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005448:	2303      	movs	r3, #3
 800544a:	e0bf      	b.n	80055cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005454:	2b00      	cmp	r3, #0
 8005456:	d050      	beq.n	80054fa <USBD_CDC_Setup+0xde>
 8005458:	2b20      	cmp	r3, #32
 800545a:	f040 80af 	bne.w	80055bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d03a      	beq.n	80054dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b25b      	sxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	da1b      	bge.n	80054a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	33b0      	adds	r3, #176	; 0xb0
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005486:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	88d2      	ldrh	r2, [r2, #6]
 800548c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	88db      	ldrh	r3, [r3, #6]
 8005492:	2b07      	cmp	r3, #7
 8005494:	bf28      	it	cs
 8005496:	2307      	movcs	r3, #7
 8005498:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	89fa      	ldrh	r2, [r7, #14]
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 fd43 	bl	8006f2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054a6:	e090      	b.n	80055ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	785a      	ldrb	r2, [r3, #1]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	88db      	ldrh	r3, [r3, #6]
 80054b6:	2b3f      	cmp	r3, #63	; 0x3f
 80054b8:	d803      	bhi.n	80054c2 <USBD_CDC_Setup+0xa6>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	88db      	ldrh	r3, [r3, #6]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	e000      	b.n	80054c4 <USBD_CDC_Setup+0xa8>
 80054c2:	2240      	movs	r2, #64	; 0x40
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054ca:	6939      	ldr	r1, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054d2:	461a      	mov	r2, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fd55 	bl	8006f84 <USBD_CtlPrepareRx>
      break;
 80054da:	e076      	b.n	80055ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	33b0      	adds	r3, #176	; 0xb0
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	7850      	ldrb	r0, [r2, #1]
 80054f2:	2200      	movs	r2, #0
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	4798      	blx	r3
      break;
 80054f8:	e067      	b.n	80055ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b0b      	cmp	r3, #11
 8005500:	d851      	bhi.n	80055a6 <USBD_CDC_Setup+0x18a>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <USBD_CDC_Setup+0xec>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005539 	.word	0x08005539
 800550c:	080055b5 	.word	0x080055b5
 8005510:	080055a7 	.word	0x080055a7
 8005514:	080055a7 	.word	0x080055a7
 8005518:	080055a7 	.word	0x080055a7
 800551c:	080055a7 	.word	0x080055a7
 8005520:	080055a7 	.word	0x080055a7
 8005524:	080055a7 	.word	0x080055a7
 8005528:	080055a7 	.word	0x080055a7
 800552c:	080055a7 	.word	0x080055a7
 8005530:	08005563 	.word	0x08005563
 8005534:	0800558d 	.word	0x0800558d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b03      	cmp	r3, #3
 8005542:	d107      	bne.n	8005554 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005544:	f107 030a 	add.w	r3, r7, #10
 8005548:	2202      	movs	r2, #2
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fced 	bl	8006f2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005552:	e032      	b.n	80055ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fc77 	bl	8006e4a <USBD_CtlError>
            ret = USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	75fb      	strb	r3, [r7, #23]
          break;
 8005560:	e02b      	b.n	80055ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d107      	bne.n	800557e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800556e:	f107 030d 	add.w	r3, r7, #13
 8005572:	2201      	movs	r2, #1
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fcd8 	bl	8006f2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800557c:	e01d      	b.n	80055ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 fc62 	bl	8006e4a <USBD_CtlError>
            ret = USBD_FAIL;
 8005586:	2303      	movs	r3, #3
 8005588:	75fb      	strb	r3, [r7, #23]
          break;
 800558a:	e016      	b.n	80055ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b03      	cmp	r3, #3
 8005596:	d00f      	beq.n	80055b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 fc55 	bl	8006e4a <USBD_CtlError>
            ret = USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055a4:	e008      	b.n	80055b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 fc4e 	bl	8006e4a <USBD_CtlError>
          ret = USBD_FAIL;
 80055ae:	2303      	movs	r3, #3
 80055b0:	75fb      	strb	r3, [r7, #23]
          break;
 80055b2:	e002      	b.n	80055ba <USBD_CDC_Setup+0x19e>
          break;
 80055b4:	bf00      	nop
 80055b6:	e008      	b.n	80055ca <USBD_CDC_Setup+0x1ae>
          break;
 80055b8:	bf00      	nop
      }
      break;
 80055ba:	e006      	b.n	80055ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 fc43 	bl	8006e4a <USBD_CtlError>
      ret = USBD_FAIL;
 80055c4:	2303      	movs	r3, #3
 80055c6:	75fb      	strb	r3, [r7, #23]
      break;
 80055c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80055e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	32b0      	adds	r2, #176	; 0xb0
 80055f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e065      	b.n	80056ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	32b0      	adds	r2, #176	; 0xb0
 8005608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	f003 020f 	and.w	r2, r3, #15
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	3318      	adds	r3, #24
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d02f      	beq.n	8005688 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	f003 020f 	and.w	r2, r3, #15
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3318      	adds	r3, #24
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	f003 010f 	and.w	r1, r3, #15
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	460b      	mov	r3, r1
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	440b      	add	r3, r1
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4403      	add	r3, r0
 8005650:	3348      	adds	r3, #72	; 0x48
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	fbb2 f1f3 	udiv	r1, r2, r3
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800565e:	2b00      	cmp	r3, #0
 8005660:	d112      	bne.n	8005688 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3318      	adds	r3, #24
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800567a:	78f9      	ldrb	r1, [r7, #3]
 800567c:	2300      	movs	r3, #0
 800567e:	2200      	movs	r2, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f002 f92e 	bl	80078e2 <USBD_LL_Transmit>
 8005686:	e01f      	b.n	80056c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	33b0      	adds	r3, #176	; 0xb0
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d010      	beq.n	80056c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	33b0      	adds	r3, #176	; 0xb0
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	32b0      	adds	r2, #176	; 0xb0
 80056e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	32b0      	adds	r2, #176	; 0xb0
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005700:	2303      	movs	r3, #3
 8005702:	e01a      	b.n	800573a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f002 f92c 	bl	8007966 <USBD_LL_GetRxDataSize>
 800570e:	4602      	mov	r2, r0
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	33b0      	adds	r3, #176	; 0xb0
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005734:	4611      	mov	r1, r2
 8005736:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	32b0      	adds	r2, #176	; 0xb0
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005760:	2303      	movs	r3, #3
 8005762:	e025      	b.n	80057b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	33b0      	adds	r3, #176	; 0xb0
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01a      	beq.n	80057ae <USBD_CDC_EP0_RxReady+0x6c>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800577e:	2bff      	cmp	r3, #255	; 0xff
 8005780:	d015      	beq.n	80057ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	33b0      	adds	r3, #176	; 0xb0
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800579a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057a2:	b292      	uxth	r2, r2
 80057a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	22ff      	movs	r2, #255	; 0xff
 80057aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057c0:	2182      	movs	r1, #130	; 0x82
 80057c2:	4818      	ldr	r0, [pc, #96]	; (8005824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057c4:	f000 fd09 	bl	80061da <USBD_GetEpDesc>
 80057c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057ca:	2101      	movs	r1, #1
 80057cc:	4815      	ldr	r0, [pc, #84]	; (8005824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057ce:	f000 fd04 	bl	80061da <USBD_GetEpDesc>
 80057d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057d4:	2181      	movs	r1, #129	; 0x81
 80057d6:	4813      	ldr	r0, [pc, #76]	; (8005824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057d8:	f000 fcff 	bl	80061da <USBD_GetEpDesc>
 80057dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2210      	movs	r2, #16
 80057e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d006      	beq.n	80057fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f8:	711a      	strb	r2, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800580c:	711a      	strb	r2, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2243      	movs	r2, #67	; 0x43
 8005816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000050 	.word	0x20000050

08005828 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005830:	2182      	movs	r1, #130	; 0x82
 8005832:	4818      	ldr	r0, [pc, #96]	; (8005894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005834:	f000 fcd1 	bl	80061da <USBD_GetEpDesc>
 8005838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800583a:	2101      	movs	r1, #1
 800583c:	4815      	ldr	r0, [pc, #84]	; (8005894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800583e:	f000 fccc 	bl	80061da <USBD_GetEpDesc>
 8005842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005844:	2181      	movs	r1, #129	; 0x81
 8005846:	4813      	ldr	r0, [pc, #76]	; (8005894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005848:	f000 fcc7 	bl	80061da <USBD_GetEpDesc>
 800584c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2210      	movs	r2, #16
 8005858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d006      	beq.n	800586e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2200      	movs	r2, #0
 8005864:	711a      	strb	r2, [r3, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f042 0202 	orr.w	r2, r2, #2
 800586c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d006      	beq.n	8005882 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	711a      	strb	r2, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f042 0202 	orr.w	r2, r2, #2
 8005880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2243      	movs	r2, #67	; 0x43
 8005886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005888:	4b02      	ldr	r3, [pc, #8]	; (8005894 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000050 	.word	0x20000050

08005898 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058a0:	2182      	movs	r1, #130	; 0x82
 80058a2:	4818      	ldr	r0, [pc, #96]	; (8005904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058a4:	f000 fc99 	bl	80061da <USBD_GetEpDesc>
 80058a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058aa:	2101      	movs	r1, #1
 80058ac:	4815      	ldr	r0, [pc, #84]	; (8005904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058ae:	f000 fc94 	bl	80061da <USBD_GetEpDesc>
 80058b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058b4:	2181      	movs	r1, #129	; 0x81
 80058b6:	4813      	ldr	r0, [pc, #76]	; (8005904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058b8:	f000 fc8f 	bl	80061da <USBD_GetEpDesc>
 80058bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2210      	movs	r2, #16
 80058c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d006      	beq.n	80058de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d8:	711a      	strb	r2, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d006      	beq.n	80058f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ec:	711a      	strb	r2, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2243      	movs	r2, #67	; 0x43
 80058f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058f8:	4b02      	ldr	r3, [pc, #8]	; (8005904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000050 	.word	0x20000050

08005908 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	220a      	movs	r2, #10
 8005914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005916:	4b03      	ldr	r3, [pc, #12]	; (8005924 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	2000000c 	.word	0x2000000c

08005928 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005938:	2303      	movs	r3, #3
 800593a:	e009      	b.n	8005950 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	33b0      	adds	r3, #176	; 0xb0
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	32b0      	adds	r2, #176	; 0xb0
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800597e:	2303      	movs	r3, #3
 8005980:	e008      	b.n	8005994 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	32b0      	adds	r2, #176	; 0xb0
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e004      	b.n	80059ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	32b0      	adds	r2, #176	; 0xb0
 80059ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	32b0      	adds	r2, #176	; 0xb0
 80059fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e018      	b.n	8005a3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7c1b      	ldrb	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <USBD_CDC_ReceivePacket+0x68>)
 8005a14:	7819      	ldrb	r1, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 ff7f 	bl	8007924 <USBD_LL_PrepareReceive>
 8005a26:	e008      	b.n	8005a3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <USBD_CDC_ReceivePacket+0x68>)
 8005a2a:	7819      	ldrb	r1, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a32:	2340      	movs	r3, #64	; 0x40
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 ff75 	bl	8007924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20000094 	.word	0x20000094

08005a48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e01f      	b.n	8005aa0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f001 fdef 	bl	8007678 <USBD_LL_Init>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e025      	b.n	8005b0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	32ae      	adds	r2, #174	; 0xae
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00f      	beq.n	8005afc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	32ae      	adds	r2, #174	; 0xae
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f107 020e 	add.w	r2, r7, #14
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fdf7 	bl	8007710 <USBD_LL_Start>
 8005b22:	4603      	mov	r3, r0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	4611      	mov	r1, r2
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f908 	bl	8006dd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d01a      	beq.n	8005c20 <USBD_LL_SetupStage+0x72>
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d822      	bhi.n	8005c34 <USBD_LL_SetupStage+0x86>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <USBD_LL_SetupStage+0x4a>
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d00a      	beq.n	8005c0c <USBD_LL_SetupStage+0x5e>
 8005bf6:	e01d      	b.n	8005c34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb5f 	bl	80062c4 <USBD_StdDevReq>
 8005c06:	4603      	mov	r3, r0
 8005c08:	73fb      	strb	r3, [r7, #15]
      break;
 8005c0a:	e020      	b.n	8005c4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fbc7 	bl	80063a8 <USBD_StdItfReq>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1e:	e016      	b.n	8005c4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fc29 	bl	8006480 <USBD_StdEPReq>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]
      break;
 8005c32:	e00c      	b.n	8005c4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 fdc4 	bl	80077d0 <USBD_LL_StallEP>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c4c:	bf00      	nop
  }

  return ret;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	460b      	mov	r3, r1
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d16e      	bne.n	8005d4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	f040 8098 	bne.w	8005db4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d913      	bls.n	8005cb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	bf28      	it	cs
 8005caa:	4613      	movcs	r3, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f001 f984 	bl	8006fbe <USBD_CtlContinueRx>
 8005cb6:	e07d      	b.n	8005db4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d014      	beq.n	8005cf0 <USBD_LL_DataOutStage+0x98>
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d81d      	bhi.n	8005d06 <USBD_LL_DataOutStage+0xae>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <USBD_LL_DataOutStage+0x7c>
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d003      	beq.n	8005cda <USBD_LL_DataOutStage+0x82>
 8005cd2:	e018      	b.n	8005d06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	75bb      	strb	r3, [r7, #22]
            break;
 8005cd8:	e018      	b.n	8005d0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fa5e 	bl	80061a6 <USBD_CoreFindIF>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75bb      	strb	r3, [r7, #22]
            break;
 8005cee:	e00d      	b.n	8005d0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fa60 	bl	80061c0 <USBD_CoreFindEP>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75bb      	strb	r3, [r7, #22]
            break;
 8005d04:	e002      	b.n	8005d0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75bb      	strb	r3, [r7, #22]
            break;
 8005d0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d0c:	7dbb      	ldrb	r3, [r7, #22]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d113      	bne.n	8005d46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d1e:	7dba      	ldrb	r2, [r7, #22]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	32ae      	adds	r2, #174	; 0xae
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d2e:	7dba      	ldrb	r2, [r7, #22]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d36:	7dba      	ldrb	r2, [r7, #22]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	32ae      	adds	r2, #174	; 0xae
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f001 f94a 	bl	8006fe0 <USBD_CtlSendStatus>
 8005d4c:	e032      	b.n	8005db4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fa31 	bl	80061c0 <USBD_CoreFindEP>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d62:	7dbb      	ldrb	r3, [r7, #22]
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	d025      	beq.n	8005db4 <USBD_LL_DataOutStage+0x15c>
 8005d68:	7dbb      	ldrb	r3, [r7, #22]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d122      	bne.n	8005db4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d117      	bne.n	8005daa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d7a:	7dba      	ldrb	r2, [r7, #22]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	32ae      	adds	r2, #174	; 0xae
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00f      	beq.n	8005daa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d8a:	7dba      	ldrb	r2, [r7, #22]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d92:	7dba      	ldrb	r2, [r7, #22]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	32ae      	adds	r2, #174	; 0xae
 8005d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	7afa      	ldrb	r2, [r7, #11]
 8005da0:	4611      	mov	r1, r2
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	4798      	blx	r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	e000      	b.n	8005db6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b086      	sub	sp, #24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005dcc:	7afb      	ldrb	r3, [r7, #11]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d16f      	bne.n	8005eb2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3314      	adds	r3, #20
 8005dd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d15a      	bne.n	8005e98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d914      	bls.n	8005e18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	1ad2      	subs	r2, r2, r3
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	461a      	mov	r2, r3
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f001 f8ac 	bl	8006f62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2100      	movs	r1, #0
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 fd87 	bl	8007924 <USBD_LL_PrepareReceive>
 8005e16:	e03f      	b.n	8005e98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d11c      	bne.n	8005e5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d316      	bcc.n	8005e5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d20f      	bcs.n	8005e5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2100      	movs	r1, #0
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f001 f88d 	bl	8006f62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e50:	2300      	movs	r3, #0
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f001 fd64 	bl	8007924 <USBD_LL_PrepareReceive>
 8005e5c:	e01c      	b.n	8005e98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d10f      	bne.n	8005e8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e8a:	2180      	movs	r1, #128	; 0x80
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f001 fc9f 	bl	80077d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f001 f8b7 	bl	8007006 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03a      	beq.n	8005f18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fe42 	bl	8005b2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005eb0:	e032      	b.n	8005f18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f97f 	bl	80061c0 <USBD_CoreFindEP>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2bff      	cmp	r3, #255	; 0xff
 8005eca:	d025      	beq.n	8005f18 <USBD_LL_DataInStage+0x15a>
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d122      	bne.n	8005f18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d11c      	bne.n	8005f18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ede:	7dfa      	ldrb	r2, [r7, #23]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	32ae      	adds	r2, #174	; 0xae
 8005ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d014      	beq.n	8005f18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005eee:	7dfa      	ldrb	r2, [r7, #23]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ef6:	7dfa      	ldrb	r2, [r7, #23]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	32ae      	adds	r2, #174	; 0xae
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	7afa      	ldrb	r2, [r7, #11]
 8005f04:	4611      	mov	r1, r2
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f0e:	7dbb      	ldrb	r3, [r7, #22]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f14:	7dbb      	ldrb	r3, [r7, #22]
 8005f16:	e000      	b.n	8005f1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d014      	beq.n	8005f88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6852      	ldr	r2, [r2, #4]
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	4611      	mov	r1, r2
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fbd9 	bl	8007746 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fbcb 	bl	8007746 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2240      	movs	r2, #64	; 0x40
 8005fba:	621a      	str	r2, [r3, #32]

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2204      	movs	r2, #4
 8006000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b04      	cmp	r3, #4
 8006024:	d106      	bne.n	8006034 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800602c:	b2da      	uxtb	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d110      	bne.n	8006078 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	32ae      	adds	r2, #174	; 0xae
 8006098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e01c      	b.n	80060de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d115      	bne.n	80060dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	32ae      	adds	r2, #174	; 0xae
 80060ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	32ae      	adds	r2, #174	; 0xae
 80060ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	4611      	mov	r1, r2
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	32ae      	adds	r2, #174	; 0xae
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006104:	2303      	movs	r3, #3
 8006106:	e01c      	b.n	8006142 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b03      	cmp	r3, #3
 8006112:	d115      	bne.n	8006140 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	32ae      	adds	r2, #174	; 0xae
 800611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32ae      	adds	r2, #174	; 0xae
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	4611      	mov	r1, r2
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00e      	beq.n	800619c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6852      	ldr	r2, [r2, #4]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	4611      	mov	r1, r2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006198:	2303      	movs	r3, #3
 800619a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	885b      	ldrh	r3, [r3, #2]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	429a      	cmp	r2, r3
 8006200:	d920      	bls.n	8006244 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800620a:	e013      	b.n	8006234 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800620c:	f107 030a 	add.w	r3, r7, #10
 8006210:	4619      	mov	r1, r3
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f000 f81b 	bl	800624e <USBD_GetNextDesc>
 8006218:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b05      	cmp	r3, #5
 8006220:	d108      	bne.n	8006234 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	789b      	ldrb	r3, [r3, #2]
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	429a      	cmp	r2, r3
 800622e:	d008      	beq.n	8006242 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	b29a      	uxth	r2, r3
 800623a:	897b      	ldrh	r3, [r7, #10]
 800623c:	429a      	cmp	r2, r3
 800623e:	d8e5      	bhi.n	800620c <USBD_GetEpDesc+0x32>
 8006240:	e000      	b.n	8006244 <USBD_GetEpDesc+0x6a>
          break;
 8006242:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006244:	693b      	ldr	r3, [r7, #16]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	4413      	add	r3, r2
 8006268:	b29a      	uxth	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	3301      	adds	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062a6:	8a3b      	ldrh	r3, [r7, #16]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	b21a      	sxth	r2, r3
 80062ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b21b      	sxth	r3, r3
 80062b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062b6:	89fb      	ldrh	r3, [r7, #14]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d005      	beq.n	80062ea <USBD_StdDevReq+0x26>
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d857      	bhi.n	8006392 <USBD_StdDevReq+0xce>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00f      	beq.n	8006306 <USBD_StdDevReq+0x42>
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d153      	bne.n	8006392 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	32ae      	adds	r2, #174	; 0xae
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
      break;
 8006304:	e04a      	b.n	800639c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b09      	cmp	r3, #9
 800630c:	d83b      	bhi.n	8006386 <USBD_StdDevReq+0xc2>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <USBD_StdDevReq+0x50>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006369 	.word	0x08006369
 8006318:	0800637d 	.word	0x0800637d
 800631c:	08006387 	.word	0x08006387
 8006320:	08006373 	.word	0x08006373
 8006324:	08006387 	.word	0x08006387
 8006328:	08006347 	.word	0x08006347
 800632c:	0800633d 	.word	0x0800633d
 8006330:	08006387 	.word	0x08006387
 8006334:	0800635f 	.word	0x0800635f
 8006338:	08006351 	.word	0x08006351
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa3c 	bl	80067bc <USBD_GetDescriptor>
          break;
 8006344:	e024      	b.n	8006390 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fba1 	bl	8006a90 <USBD_SetAddress>
          break;
 800634e:	e01f      	b.n	8006390 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fbe0 	bl	8006b18 <USBD_SetConfig>
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
          break;
 800635c:	e018      	b.n	8006390 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fc83 	bl	8006c6c <USBD_GetConfig>
          break;
 8006366:	e013      	b.n	8006390 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fcb4 	bl	8006cd8 <USBD_GetStatus>
          break;
 8006370:	e00e      	b.n	8006390 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fce3 	bl	8006d40 <USBD_SetFeature>
          break;
 800637a:	e009      	b.n	8006390 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fd07 	bl	8006d92 <USBD_ClrFeature>
          break;
 8006384:	e004      	b.n	8006390 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fd5e 	bl	8006e4a <USBD_CtlError>
          break;
 800638e:	bf00      	nop
      }
      break;
 8006390:	e004      	b.n	800639c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fd58 	bl	8006e4a <USBD_CtlError>
      break;
 800639a:	bf00      	nop
  }

  return ret;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop

080063a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d005      	beq.n	80063ce <USBD_StdItfReq+0x26>
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	d852      	bhi.n	800646c <USBD_StdItfReq+0xc4>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <USBD_StdItfReq+0x26>
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d14e      	bne.n	800646c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d840      	bhi.n	800645e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	889b      	ldrh	r3, [r3, #4]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d836      	bhi.n	8006454 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	889b      	ldrh	r3, [r3, #4]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fed9 	bl	80061a6 <USBD_CoreFindIF>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2bff      	cmp	r3, #255	; 0xff
 80063fc:	d01d      	beq.n	800643a <USBD_StdItfReq+0x92>
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11a      	bne.n	800643a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006404:	7bba      	ldrb	r2, [r7, #14]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	32ae      	adds	r2, #174	; 0xae
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00f      	beq.n	8006434 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006414:	7bba      	ldrb	r2, [r7, #14]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800641c:	7bba      	ldrb	r2, [r7, #14]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	32ae      	adds	r2, #174	; 0xae
 8006422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
 800642e:	4603      	mov	r3, r0
 8006430:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006432:	e004      	b.n	800643e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006434:	2303      	movs	r3, #3
 8006436:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006438:	e001      	b.n	800643e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88db      	ldrh	r3, [r3, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d110      	bne.n	8006468 <USBD_StdItfReq+0xc0>
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10d      	bne.n	8006468 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fdc7 	bl	8006fe0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006452:	e009      	b.n	8006468 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fcf7 	bl	8006e4a <USBD_CtlError>
          break;
 800645c:	e004      	b.n	8006468 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fcf2 	bl	8006e4a <USBD_CtlError>
          break;
 8006466:	e000      	b.n	800646a <USBD_StdItfReq+0xc2>
          break;
 8006468:	bf00      	nop
      }
      break;
 800646a:	e004      	b.n	8006476 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fceb 	bl	8006e4a <USBD_CtlError>
      break;
 8006474:	bf00      	nop
  }

  return ret;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	889b      	ldrh	r3, [r3, #4]
 8006492:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d007      	beq.n	80064b0 <USBD_StdEPReq+0x30>
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	f200 817f 	bhi.w	80067a4 <USBD_StdEPReq+0x324>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02a      	beq.n	8006500 <USBD_StdEPReq+0x80>
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	f040 817a 	bne.w	80067a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fe83 	bl	80061c0 <USBD_CoreFindEP>
 80064ba:	4603      	mov	r3, r0
 80064bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064be:	7b7b      	ldrb	r3, [r7, #13]
 80064c0:	2bff      	cmp	r3, #255	; 0xff
 80064c2:	f000 8174 	beq.w	80067ae <USBD_StdEPReq+0x32e>
 80064c6:	7b7b      	ldrb	r3, [r7, #13]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 8170 	bne.w	80067ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80064ce:	7b7a      	ldrb	r2, [r7, #13]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80064d6:	7b7a      	ldrb	r2, [r7, #13]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	32ae      	adds	r2, #174	; 0xae
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8163 	beq.w	80067ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80064e8:	7b7a      	ldrb	r2, [r7, #13]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32ae      	adds	r2, #174	; 0xae
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064fe:	e156      	b.n	80067ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b03      	cmp	r3, #3
 8006506:	d008      	beq.n	800651a <USBD_StdEPReq+0x9a>
 8006508:	2b03      	cmp	r3, #3
 800650a:	f300 8145 	bgt.w	8006798 <USBD_StdEPReq+0x318>
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 809b 	beq.w	800664a <USBD_StdEPReq+0x1ca>
 8006514:	2b01      	cmp	r3, #1
 8006516:	d03c      	beq.n	8006592 <USBD_StdEPReq+0x112>
 8006518:	e13e      	b.n	8006798 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d002      	beq.n	800652c <USBD_StdEPReq+0xac>
 8006526:	2b03      	cmp	r3, #3
 8006528:	d016      	beq.n	8006558 <USBD_StdEPReq+0xd8>
 800652a:	e02c      	b.n	8006586 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00d      	beq.n	800654e <USBD_StdEPReq+0xce>
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d00a      	beq.n	800654e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 f947 	bl	80077d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 f943 	bl	80077d0 <USBD_LL_StallEP>
 800654a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800654c:	e020      	b.n	8006590 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fc7a 	bl	8006e4a <USBD_CtlError>
              break;
 8006556:	e01b      	b.n	8006590 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	885b      	ldrh	r3, [r3, #2]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10e      	bne.n	800657e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <USBD_StdEPReq+0xfe>
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	2b80      	cmp	r3, #128	; 0x80
 800656a:	d008      	beq.n	800657e <USBD_StdEPReq+0xfe>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	88db      	ldrh	r3, [r3, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f929 	bl	80077d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fd2e 	bl	8006fe0 <USBD_CtlSendStatus>

              break;
 8006584:	e004      	b.n	8006590 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc5e 	bl	8006e4a <USBD_CtlError>
              break;
 800658e:	bf00      	nop
          }
          break;
 8006590:	e107      	b.n	80067a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d002      	beq.n	80065a4 <USBD_StdEPReq+0x124>
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d016      	beq.n	80065d0 <USBD_StdEPReq+0x150>
 80065a2:	e04b      	b.n	800663c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <USBD_StdEPReq+0x146>
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d00a      	beq.n	80065c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f90b 	bl	80077d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ba:	2180      	movs	r1, #128	; 0x80
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 f907 	bl	80077d0 <USBD_LL_StallEP>
 80065c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065c4:	e040      	b.n	8006648 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fc3e 	bl	8006e4a <USBD_CtlError>
              break;
 80065ce:	e03b      	b.n	8006648 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	885b      	ldrh	r3, [r3, #2]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d136      	bne.n	8006646 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f911 	bl	800780e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fcf7 	bl	8006fe0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fde2 	bl	80061c0 <USBD_CoreFindEP>
 80065fc:	4603      	mov	r3, r0
 80065fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006600:	7b7b      	ldrb	r3, [r7, #13]
 8006602:	2bff      	cmp	r3, #255	; 0xff
 8006604:	d01f      	beq.n	8006646 <USBD_StdEPReq+0x1c6>
 8006606:	7b7b      	ldrb	r3, [r7, #13]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d11c      	bne.n	8006646 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800660c:	7b7a      	ldrb	r2, [r7, #13]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006614:	7b7a      	ldrb	r2, [r7, #13]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32ae      	adds	r2, #174	; 0xae
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d010      	beq.n	8006646 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006624:	7b7a      	ldrb	r2, [r7, #13]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	32ae      	adds	r2, #174	; 0xae
 800662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	4798      	blx	r3
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800663a:	e004      	b.n	8006646 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc03 	bl	8006e4a <USBD_CtlError>
              break;
 8006644:	e000      	b.n	8006648 <USBD_StdEPReq+0x1c8>
              break;
 8006646:	bf00      	nop
          }
          break;
 8006648:	e0ab      	b.n	80067a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d002      	beq.n	800665c <USBD_StdEPReq+0x1dc>
 8006656:	2b03      	cmp	r3, #3
 8006658:	d032      	beq.n	80066c0 <USBD_StdEPReq+0x240>
 800665a:	e097      	b.n	800678c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <USBD_StdEPReq+0x1f2>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d004      	beq.n	8006672 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fbed 	bl	8006e4a <USBD_CtlError>
                break;
 8006670:	e091      	b.n	8006796 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da0b      	bge.n	8006692 <USBD_StdEPReq+0x212>
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	3310      	adds	r3, #16
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4413      	add	r3, r2
 800668e:	3304      	adds	r3, #4
 8006690:	e00b      	b.n	80066aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4413      	add	r3, r2
 80066a8:	3304      	adds	r3, #4
 80066aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2202      	movs	r2, #2
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fc37 	bl	8006f2c <USBD_CtlSendData>
              break;
 80066be:	e06a      	b.n	8006796 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	da11      	bge.n	80066ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	3324      	adds	r3, #36	; 0x24
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d117      	bne.n	8006712 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fbb0 	bl	8006e4a <USBD_CtlError>
                  break;
 80066ea:	e054      	b.n	8006796 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fb9d 	bl	8006e4a <USBD_CtlError>
                  break;
 8006710:	e041      	b.n	8006796 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da0b      	bge.n	8006732 <USBD_StdEPReq+0x2b2>
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	3310      	adds	r3, #16
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	3304      	adds	r3, #4
 8006730:	e00b      	b.n	800674a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	4413      	add	r3, r2
 8006748:	3304      	adds	r3, #4
 800674a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <USBD_StdEPReq+0x2d8>
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b80      	cmp	r3, #128	; 0x80
 8006756:	d103      	bne.n	8006760 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e00e      	b.n	800677e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 f871 	bl	800784c <USBD_LL_IsStallEP>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e002      	b.n	800677e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2202      	movs	r2, #2
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fbd1 	bl	8006f2c <USBD_CtlSendData>
              break;
 800678a:	e004      	b.n	8006796 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fb5b 	bl	8006e4a <USBD_CtlError>
              break;
 8006794:	bf00      	nop
          }
          break;
 8006796:	e004      	b.n	80067a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fb55 	bl	8006e4a <USBD_CtlError>
          break;
 80067a0:	bf00      	nop
      }
      break;
 80067a2:	e005      	b.n	80067b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fb4f 	bl	8006e4a <USBD_CtlError>
      break;
 80067ac:	e000      	b.n	80067b0 <USBD_StdEPReq+0x330>
      break;
 80067ae:	bf00      	nop
  }

  return ret;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	885b      	ldrh	r3, [r3, #2]
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	2b06      	cmp	r3, #6
 80067de:	f200 8128 	bhi.w	8006a32 <USBD_GetDescriptor+0x276>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <USBD_GetDescriptor+0x2c>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006805 	.word	0x08006805
 80067ec:	0800681d 	.word	0x0800681d
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	08006a33 	.word	0x08006a33
 80067f8:	08006a33 	.word	0x08006a33
 80067fc:	080069d3 	.word	0x080069d3
 8006800:	080069ff 	.word	0x080069ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	7c12      	ldrb	r2, [r2, #16]
 8006810:	f107 0108 	add.w	r1, r7, #8
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	60f8      	str	r0, [r7, #12]
      break;
 800681a:	e112      	b.n	8006a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7c1b      	ldrb	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10d      	bne.n	8006840 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	f107 0208 	add.w	r2, r7, #8
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3301      	adds	r3, #1
 800683a:	2202      	movs	r2, #2
 800683c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800683e:	e100      	b.n	8006a42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	f107 0208 	add.w	r2, r7, #8
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	2202      	movs	r2, #2
 8006858:	701a      	strb	r2, [r3, #0]
      break;
 800685a:	e0f2      	b.n	8006a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	885b      	ldrh	r3, [r3, #2]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b05      	cmp	r3, #5
 8006864:	f200 80ac 	bhi.w	80069c0 <USBD_GetDescriptor+0x204>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <USBD_GetDescriptor+0xb4>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006889 	.word	0x08006889
 8006874:	080068bd 	.word	0x080068bd
 8006878:	080068f1 	.word	0x080068f1
 800687c:	08006925 	.word	0x08006925
 8006880:	08006959 	.word	0x08006959
 8006884:	0800698d 	.word	0x0800698d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	7c12      	ldrb	r2, [r2, #16]
 80068a0:	f107 0108 	add.w	r1, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068aa:	e091      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 facb 	bl	8006e4a <USBD_CtlError>
            err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ba:	e089      	b.n	80069d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7c12      	ldrb	r2, [r2, #16]
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068de:	e077      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fab1 	bl	8006e4a <USBD_CtlError>
            err++;
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	3301      	adds	r3, #1
 80068ec:	72fb      	strb	r3, [r7, #11]
          break;
 80068ee:	e06f      	b.n	80069d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7c12      	ldrb	r2, [r2, #16]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006912:	e05d      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa97 	bl	8006e4a <USBD_CtlError>
            err++;
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	3301      	adds	r3, #1
 8006920:	72fb      	strb	r3, [r7, #11]
          break;
 8006922:	e055      	b.n	80069d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006946:	e043      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa7d 	bl	8006e4a <USBD_CtlError>
            err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
          break;
 8006956:	e03b      	b.n	80069d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e029      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa63 	bl	8006e4a <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e021      	b.n	80069d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e00f      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa49 	bl	8006e4a <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e007      	b.n	80069d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa41 	bl	8006e4a <USBD_CtlError>
          err++;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	3301      	adds	r3, #1
 80069cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80069ce:	bf00      	nop
      }
      break;
 80069d0:	e037      	b.n	8006a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	7c1b      	ldrb	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	f107 0208 	add.w	r2, r7, #8
 80069e6:	4610      	mov	r0, r2
 80069e8:	4798      	blx	r3
 80069ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ec:	e029      	b.n	8006a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa2a 	bl	8006e4a <USBD_CtlError>
        err++;
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	3301      	adds	r3, #1
 80069fa:	72fb      	strb	r3, [r7, #11]
      break;
 80069fc:	e021      	b.n	8006a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7c1b      	ldrb	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10d      	bne.n	8006a22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	f107 0208 	add.w	r2, r7, #8
 8006a12:	4610      	mov	r0, r2
 8006a14:	4798      	blx	r3
 8006a16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	2207      	movs	r2, #7
 8006a1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a20:	e00f      	b.n	8006a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa10 	bl	8006e4a <USBD_CtlError>
        err++;
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a30:	e007      	b.n	8006a42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa08 	bl	8006e4a <USBD_CtlError>
      err++;
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a40:	bf00      	nop
  }

  if (err != 0U)
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11e      	bne.n	8006a86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	88db      	ldrh	r3, [r3, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d016      	beq.n	8006a7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a50:	893b      	ldrh	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00e      	beq.n	8006a74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	88da      	ldrh	r2, [r3, #6]
 8006a5a:	893b      	ldrh	r3, [r7, #8]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	bf28      	it	cs
 8006a60:	4613      	movcs	r3, r2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a66:	893b      	ldrh	r3, [r7, #8]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa5d 	bl	8006f2c <USBD_CtlSendData>
 8006a72:	e009      	b.n	8006a88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9e7 	bl	8006e4a <USBD_CtlError>
 8006a7c:	e004      	b.n	8006a88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 faae 	bl	8006fe0 <USBD_CtlSendStatus>
 8006a84:	e000      	b.n	8006a88 <USBD_GetDescriptor+0x2cc>
    return;
 8006a86:	bf00      	nop
  }
}
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop

08006a90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	889b      	ldrh	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d131      	bne.n	8006b06 <USBD_SetAddress+0x76>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	88db      	ldrh	r3, [r3, #6]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d12d      	bne.n	8006b06 <USBD_SetAddress+0x76>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	885b      	ldrh	r3, [r3, #2]
 8006aae:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab0:	d829      	bhi.n	8006b06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006abc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d104      	bne.n	8006ad4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f9bc 	bl	8006e4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	e01d      	b.n	8006b10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7bfa      	ldrb	r2, [r7, #15]
 8006ad8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fedf 	bl	80078a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa7a 	bl	8006fe0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afa:	e009      	b.n	8006b10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b04:	e004      	b.n	8006b10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f99e 	bl	8006e4a <USBD_CtlError>
  }
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	; (8006c68 <USBD_SetConfig+0x150>)
 8006b2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b30:	4b4d      	ldr	r3, [pc, #308]	; (8006c68 <USBD_SetConfig+0x150>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d905      	bls.n	8006b44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f985 	bl	8006e4a <USBD_CtlError>
    return USBD_FAIL;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e08c      	b.n	8006c5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d002      	beq.n	8006b56 <USBD_SetConfig+0x3e>
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d029      	beq.n	8006ba8 <USBD_SetConfig+0x90>
 8006b54:	e075      	b.n	8006c42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b56:	4b44      	ldr	r3, [pc, #272]	; (8006c68 <USBD_SetConfig+0x150>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b5e:	4b42      	ldr	r3, [pc, #264]	; (8006c68 <USBD_SetConfig+0x150>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b68:	4b3f      	ldr	r3, [pc, #252]	; (8006c68 <USBD_SetConfig+0x150>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fe ffe7 	bl	8005b42 <USBD_SetClassConfig>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f962 	bl	8006e4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b8e:	e065      	b.n	8006c5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa25 	bl	8006fe0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b9e:	e05d      	b.n	8006c5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa1d 	bl	8006fe0 <USBD_CtlSendStatus>
      break;
 8006ba6:	e059      	b.n	8006c5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ba8:	4b2f      	ldr	r3, [pc, #188]	; (8006c68 <USBD_SetConfig+0x150>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d112      	bne.n	8006bd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <USBD_SetConfig+0x150>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bc2:	4b29      	ldr	r3, [pc, #164]	; (8006c68 <USBD_SetConfig+0x150>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fe ffd6 	bl	8005b7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa06 	bl	8006fe0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bd4:	e042      	b.n	8006c5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <USBD_SetConfig+0x150>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d02a      	beq.n	8006c3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe ffc4 	bl	8005b7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006bf2:	4b1d      	ldr	r3, [pc, #116]	; (8006c68 <USBD_SetConfig+0x150>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <USBD_SetConfig+0x150>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fe ff9d 	bl	8005b42 <USBD_SetClassConfig>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f918 	bl	8006e4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fe ffa9 	bl	8005b7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c30:	e014      	b.n	8006c5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9d4 	bl	8006fe0 <USBD_CtlSendStatus>
      break;
 8006c38:	e010      	b.n	8006c5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9d0 	bl	8006fe0 <USBD_CtlSendStatus>
      break;
 8006c40:	e00c      	b.n	8006c5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f900 	bl	8006e4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c4a:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <USBD_SetConfig+0x150>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fe ff92 	bl	8005b7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	73fb      	strb	r3, [r7, #15]
      break;
 8006c5a:	bf00      	nop
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	2000020c 	.word	0x2000020c

08006c6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	88db      	ldrh	r3, [r3, #6]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d004      	beq.n	8006c88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f8e2 	bl	8006e4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c86:	e023      	b.n	8006cd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	dc02      	bgt.n	8006c9a <USBD_GetConfig+0x2e>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dc03      	bgt.n	8006ca0 <USBD_GetConfig+0x34>
 8006c98:	e015      	b.n	8006cc6 <USBD_GetConfig+0x5a>
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d00b      	beq.n	8006cb6 <USBD_GetConfig+0x4a>
 8006c9e:	e012      	b.n	8006cc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	2201      	movs	r2, #1
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f93c 	bl	8006f2c <USBD_CtlSendData>
        break;
 8006cb4:	e00c      	b.n	8006cd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f934 	bl	8006f2c <USBD_CtlSendData>
        break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f8be 	bl	8006e4a <USBD_CtlError>
        break;
 8006cce:	bf00      	nop
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d81e      	bhi.n	8006d2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	88db      	ldrh	r3, [r3, #6]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d004      	beq.n	8006d02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8a5 	bl	8006e4a <USBD_CtlError>
        break;
 8006d00:	e01a      	b.n	8006d38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f043 0202 	orr.w	r2, r3, #2
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	330c      	adds	r3, #12
 8006d22:	2202      	movs	r2, #2
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f900 	bl	8006f2c <USBD_CtlSendData>
      break;
 8006d2c:	e004      	b.n	8006d38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f88a 	bl	8006e4a <USBD_CtlError>
      break;
 8006d36:	bf00      	nop
  }
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	885b      	ldrh	r3, [r3, #2]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d107      	bne.n	8006d62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f940 	bl	8006fe0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d60:	e013      	b.n	8006d8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d10b      	bne.n	8006d82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	889b      	ldrh	r3, [r3, #4]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f930 	bl	8006fe0 <USBD_CtlSendStatus>
}
 8006d80:	e003      	b.n	8006d8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f860 	bl	8006e4a <USBD_CtlError>
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d80b      	bhi.n	8006dc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	885b      	ldrh	r3, [r3, #2]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10c      	bne.n	8006dcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f910 	bl	8006fe0 <USBD_CtlSendStatus>
      }
      break;
 8006dc0:	e004      	b.n	8006dcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f840 	bl	8006e4a <USBD_CtlError>
      break;
 8006dca:	e000      	b.n	8006dce <USBD_ClrFeature+0x3c>
      break;
 8006dcc:	bf00      	nop
  }
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	781a      	ldrb	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fa41 	bl	8006288 <SWAPBYTE>
 8006e06:	4603      	mov	r3, r0
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff fa34 	bl	8006288 <SWAPBYTE>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff fa27 	bl	8006288 <SWAPBYTE>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	80da      	strh	r2, [r3, #6]
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e54:	2180      	movs	r1, #128	; 0x80
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fcba 	bl	80077d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fcb6 	bl	80077d0 <USBD_LL_StallEP>
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d036      	beq.n	8006ef0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f000 f836 	bl	8006ef8 <USBD_GetLen>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	3301      	adds	r3, #1
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ebc:	e013      	b.n	8006ee6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	7812      	ldrb	r2, [r2, #0]
 8006ec8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	613b      	str	r3, [r7, #16]
    idx++;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	4413      	add	r3, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e7      	bne.n	8006ebe <USBD_GetString+0x52>
 8006eee:	e000      	b.n	8006ef2 <USBD_GetString+0x86>
    return;
 8006ef0:	bf00      	nop
  }
}
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f08:	e005      	b.n	8006f16 <USBD_GetLen+0x1e>
  {
    len++;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f5      	bne.n	8006f0a <USBD_GetLen+0x12>
  }

  return len;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	2100      	movs	r1, #0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fcc5 	bl	80078e2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	2100      	movs	r1, #0
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fcb4 	bl	80078e2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2203      	movs	r2, #3
 8006f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fcb8 	bl	8007924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	2100      	movs	r1, #0
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 fca7 	bl	8007924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2204      	movs	r2, #4
 8006fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fc73 	bl	80078e2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2205      	movs	r2, #5
 8007012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007016:	2300      	movs	r3, #0
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc81 	bl	8007924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007030:	2200      	movs	r2, #0
 8007032:	4912      	ldr	r1, [pc, #72]	; (800707c <MX_USB_DEVICE_Init+0x50>)
 8007034:	4812      	ldr	r0, [pc, #72]	; (8007080 <MX_USB_DEVICE_Init+0x54>)
 8007036:	f7fe fd07 	bl	8005a48 <USBD_Init>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007040:	f7f9 fbae 	bl	80007a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007044:	490f      	ldr	r1, [pc, #60]	; (8007084 <MX_USB_DEVICE_Init+0x58>)
 8007046:	480e      	ldr	r0, [pc, #56]	; (8007080 <MX_USB_DEVICE_Init+0x54>)
 8007048:	f7fe fd2e 	bl	8005aa8 <USBD_RegisterClass>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007052:	f7f9 fba5 	bl	80007a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007056:	490c      	ldr	r1, [pc, #48]	; (8007088 <MX_USB_DEVICE_Init+0x5c>)
 8007058:	4809      	ldr	r0, [pc, #36]	; (8007080 <MX_USB_DEVICE_Init+0x54>)
 800705a:	f7fe fc65 	bl	8005928 <USBD_CDC_RegisterInterface>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007064:	f7f9 fb9c 	bl	80007a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007068:	4805      	ldr	r0, [pc, #20]	; (8007080 <MX_USB_DEVICE_Init+0x54>)
 800706a:	f7fe fd53 	bl	8005b14 <USBD_Start>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007074:	f7f9 fb94 	bl	80007a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007078:	bf00      	nop
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200000ac 	.word	0x200000ac
 8007080:	20000210 	.word	0x20000210
 8007084:	20000018 	.word	0x20000018
 8007088:	20000098 	.word	0x20000098

0800708c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007090:	2200      	movs	r2, #0
 8007092:	4905      	ldr	r1, [pc, #20]	; (80070a8 <CDC_Init_FS+0x1c>)
 8007094:	4805      	ldr	r0, [pc, #20]	; (80070ac <CDC_Init_FS+0x20>)
 8007096:	f7fe fc61 	bl	800595c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800709a:	4905      	ldr	r1, [pc, #20]	; (80070b0 <CDC_Init_FS+0x24>)
 800709c:	4803      	ldr	r0, [pc, #12]	; (80070ac <CDC_Init_FS+0x20>)
 800709e:	f7fe fc7f 	bl	80059a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000cec 	.word	0x20000cec
 80070ac:	20000210 	.word	0x20000210
 80070b0:	200004ec 	.word	0x200004ec

080070b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b23      	cmp	r3, #35	; 0x23
 80070d8:	d84a      	bhi.n	8007170 <CDC_Control_FS+0xac>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <CDC_Control_FS+0x1c>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	08007171 	.word	0x08007171
 80070e4:	08007171 	.word	0x08007171
 80070e8:	08007171 	.word	0x08007171
 80070ec:	08007171 	.word	0x08007171
 80070f0:	08007171 	.word	0x08007171
 80070f4:	08007171 	.word	0x08007171
 80070f8:	08007171 	.word	0x08007171
 80070fc:	08007171 	.word	0x08007171
 8007100:	08007171 	.word	0x08007171
 8007104:	08007171 	.word	0x08007171
 8007108:	08007171 	.word	0x08007171
 800710c:	08007171 	.word	0x08007171
 8007110:	08007171 	.word	0x08007171
 8007114:	08007171 	.word	0x08007171
 8007118:	08007171 	.word	0x08007171
 800711c:	08007171 	.word	0x08007171
 8007120:	08007171 	.word	0x08007171
 8007124:	08007171 	.word	0x08007171
 8007128:	08007171 	.word	0x08007171
 800712c:	08007171 	.word	0x08007171
 8007130:	08007171 	.word	0x08007171
 8007134:	08007171 	.word	0x08007171
 8007138:	08007171 	.word	0x08007171
 800713c:	08007171 	.word	0x08007171
 8007140:	08007171 	.word	0x08007171
 8007144:	08007171 	.word	0x08007171
 8007148:	08007171 	.word	0x08007171
 800714c:	08007171 	.word	0x08007171
 8007150:	08007171 	.word	0x08007171
 8007154:	08007171 	.word	0x08007171
 8007158:	08007171 	.word	0x08007171
 800715c:	08007171 	.word	0x08007171
 8007160:	08007171 	.word	0x08007171
 8007164:	08007171 	.word	0x08007171
 8007168:	08007171 	.word	0x08007171
 800716c:	08007171 	.word	0x08007171
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007170:	bf00      	nop
  }

  return (USBD_OK);
 8007172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4805      	ldr	r0, [pc, #20]	; (80071a4 <CDC_Receive_FS+0x24>)
 800718e:	f7fe fc07 	bl	80059a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007192:	4804      	ldr	r0, [pc, #16]	; (80071a4 <CDC_Receive_FS+0x24>)
 8007194:	f7fe fc22 	bl	80059dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007198:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000210 	.word	0x20000210

080071a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2212      	movs	r2, #18
 80071dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071de:	4b03      	ldr	r3, [pc, #12]	; (80071ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	200000c8 	.word	0x200000c8

080071f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2204      	movs	r2, #4
 8007200:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007202:	4b03      	ldr	r3, [pc, #12]	; (8007210 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	200000dc 	.word	0x200000dc

08007214 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	4907      	ldr	r1, [pc, #28]	; (8007248 <USBD_FS_ProductStrDescriptor+0x34>)
 800722a:	4808      	ldr	r0, [pc, #32]	; (800724c <USBD_FS_ProductStrDescriptor+0x38>)
 800722c:	f7ff fe1e 	bl	8006e6c <USBD_GetString>
 8007230:	e004      	b.n	800723c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4904      	ldr	r1, [pc, #16]	; (8007248 <USBD_FS_ProductStrDescriptor+0x34>)
 8007236:	4805      	ldr	r0, [pc, #20]	; (800724c <USBD_FS_ProductStrDescriptor+0x38>)
 8007238:	f7ff fe18 	bl	8006e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	200014ec 	.word	0x200014ec
 800724c:	08007a84 	.word	0x08007a84

08007250 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	6039      	str	r1, [r7, #0]
 800725a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	4904      	ldr	r1, [pc, #16]	; (8007270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007260:	4804      	ldr	r0, [pc, #16]	; (8007274 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007262:	f7ff fe03 	bl	8006e6c <USBD_GetString>
  return USBD_StrDesc;
 8007266:	4b02      	ldr	r3, [pc, #8]	; (8007270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	200014ec 	.word	0x200014ec
 8007274:	08007a9c 	.word	0x08007a9c

08007278 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	221a      	movs	r2, #26
 8007288:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800728a:	f000 f843 	bl	8007314 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800728e:	4b02      	ldr	r3, [pc, #8]	; (8007298 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	200000e0 	.word	0x200000e0

0800729c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	6039      	str	r1, [r7, #0]
 80072a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	4907      	ldr	r1, [pc, #28]	; (80072d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072b2:	4808      	ldr	r0, [pc, #32]	; (80072d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072b4:	f7ff fdda 	bl	8006e6c <USBD_GetString>
 80072b8:	e004      	b.n	80072c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4904      	ldr	r1, [pc, #16]	; (80072d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072be:	4805      	ldr	r0, [pc, #20]	; (80072d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072c0:	f7ff fdd4 	bl	8006e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	200014ec 	.word	0x200014ec
 80072d4:	08007ab0 	.word	0x08007ab0

080072d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	6039      	str	r1, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d105      	bne.n	80072f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	4907      	ldr	r1, [pc, #28]	; (800730c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ee:	4808      	ldr	r0, [pc, #32]	; (8007310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072f0:	f7ff fdbc 	bl	8006e6c <USBD_GetString>
 80072f4:	e004      	b.n	8007300 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	4904      	ldr	r1, [pc, #16]	; (800730c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072fa:	4805      	ldr	r0, [pc, #20]	; (8007310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072fc:	f7ff fdb6 	bl	8006e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007300:	4b02      	ldr	r3, [pc, #8]	; (800730c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200014ec 	.word	0x200014ec
 8007310:	08007abc 	.word	0x08007abc

08007314 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <Get_SerialNum+0x44>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <Get_SerialNum+0x48>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <Get_SerialNum+0x4c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800733a:	2208      	movs	r2, #8
 800733c:	4909      	ldr	r1, [pc, #36]	; (8007364 <Get_SerialNum+0x50>)
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f814 	bl	800736c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007344:	2204      	movs	r2, #4
 8007346:	4908      	ldr	r1, [pc, #32]	; (8007368 <Get_SerialNum+0x54>)
 8007348:	68b8      	ldr	r0, [r7, #8]
 800734a:	f000 f80f 	bl	800736c <IntToUnicode>
  }
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	1fff7a10 	.word	0x1fff7a10
 800735c:	1fff7a14 	.word	0x1fff7a14
 8007360:	1fff7a18 	.word	0x1fff7a18
 8007364:	200000e2 	.word	0x200000e2
 8007368:	200000f2 	.word	0x200000f2

0800736c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]
 8007382:	e027      	b.n	80073d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	0f1b      	lsrs	r3, r3, #28
 8007388:	2b09      	cmp	r3, #9
 800738a:	d80b      	bhi.n	80073a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	0f1b      	lsrs	r3, r3, #28
 8007390:	b2da      	uxtb	r2, r3
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	4619      	mov	r1, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	440b      	add	r3, r1
 800739c:	3230      	adds	r2, #48	; 0x30
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e00a      	b.n	80073ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	0f1b      	lsrs	r3, r3, #28
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4619      	mov	r1, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	440b      	add	r3, r1
 80073b4:	3237      	adds	r2, #55	; 0x37
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	3301      	adds	r3, #1
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	3301      	adds	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
 80073d4:	7dfa      	ldrb	r2, [r7, #23]
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d3d3      	bcc.n	8007384 <IntToUnicode+0x18>
  }
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800740c:	d13a      	bne.n	8007484 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	4b1e      	ldr	r3, [pc, #120]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	4a1d      	ldr	r2, [pc, #116]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6313      	str	r3, [r2, #48]	; 0x30
 800741e:	4b1b      	ldr	r3, [pc, #108]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800742a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800742e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007430:	2302      	movs	r3, #2
 8007432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007438:	2303      	movs	r3, #3
 800743a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800743c:	230a      	movs	r3, #10
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	4619      	mov	r1, r3
 8007446:	4812      	ldr	r0, [pc, #72]	; (8007490 <HAL_PCD_MspInit+0xa4>)
 8007448:	f7f9 fcc8 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <HAL_PCD_MspInit+0xa0>)
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	4a0e      	ldr	r2, [pc, #56]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	6353      	str	r3, [r2, #52]	; 0x34
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	4b0b      	ldr	r3, [pc, #44]	; (800748c <HAL_PCD_MspInit+0xa0>)
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <HAL_PCD_MspInit+0xa0>)
 8007462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007466:	6453      	str	r3, [r2, #68]	; 0x44
 8007468:	4b08      	ldr	r3, [pc, #32]	; (800748c <HAL_PCD_MspInit+0xa0>)
 800746a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007474:	2200      	movs	r2, #0
 8007476:	2100      	movs	r1, #0
 8007478:	2043      	movs	r0, #67	; 0x43
 800747a:	f7f9 fc78 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800747e:	2043      	movs	r0, #67	; 0x43
 8007480:	f7f9 fc91 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007484:	bf00      	nop
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40023800 	.word	0x40023800
 8007490:	40020000 	.word	0x40020000

08007494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fe fb7f 	bl	8005bae <USBD_LL_SetupStage>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	4619      	mov	r1, r3
 80074e2:	f7fe fbb9 	bl	8005c58 <USBD_LL_DataOutStage>
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	334c      	adds	r3, #76	; 0x4c
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	4619      	mov	r1, r3
 8007516:	f7fe fc52 	bl	8005dbe <USBD_LL_DataInStage>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fd86 	bl	8006042 <USBD_LL_SOF>
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007546:	2301      	movs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
 8007556:	e008      	b.n	800756a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d102      	bne.n	8007566 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e001      	b.n	800756a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007566:	f7f9 f91b 	bl	80007a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007570:	7bfa      	ldrb	r2, [r7, #15]
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fd26 	bl	8005fc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe fcce 	bl	8005f22 <USBD_LL_Reset>
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd21 	bl	8005fe6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <HAL_PCD_SuspendCallback+0x48>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	4a03      	ldr	r2, [pc, #12]	; (80075d8 <HAL_PCD_SuspendCallback+0x48>)
 80075ca:	f043 0306 	orr.w	r3, r3, #6
 80075ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000ed00 	.word	0xe000ed00

080075dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fd11 	bl	8006012 <USBD_LL_Resume>
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fd69 	bl	80060e6 <USBD_LL_IsoOUTIncomplete>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fd25 	bl	8006082 <USBD_LL_IsoINIncomplete>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fd7b 	bl	800614a <USBD_LL_DevConnected>
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fd78 	bl	8006160 <USBD_LL_DevDisconnected>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d13c      	bne.n	8007702 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007688:	4a20      	ldr	r2, [pc, #128]	; (800770c <USBD_LL_Init+0x94>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1e      	ldr	r2, [pc, #120]	; (800770c <USBD_LL_Init+0x94>)
 8007694:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007698:	4b1c      	ldr	r3, [pc, #112]	; (800770c <USBD_LL_Init+0x94>)
 800769a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800769e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076a0:	4b1a      	ldr	r3, [pc, #104]	; (800770c <USBD_LL_Init+0x94>)
 80076a2:	2204      	movs	r2, #4
 80076a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076a6:	4b19      	ldr	r3, [pc, #100]	; (800770c <USBD_LL_Init+0x94>)
 80076a8:	2202      	movs	r2, #2
 80076aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076ac:	4b17      	ldr	r3, [pc, #92]	; (800770c <USBD_LL_Init+0x94>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <USBD_LL_Init+0x94>)
 80076b4:	2202      	movs	r2, #2
 80076b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <USBD_LL_Init+0x94>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <USBD_LL_Init+0x94>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076c4:	4b11      	ldr	r3, [pc, #68]	; (800770c <USBD_LL_Init+0x94>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076ca:	4b10      	ldr	r3, [pc, #64]	; (800770c <USBD_LL_Init+0x94>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076d0:	4b0e      	ldr	r3, [pc, #56]	; (800770c <USBD_LL_Init+0x94>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076d6:	480d      	ldr	r0, [pc, #52]	; (800770c <USBD_LL_Init+0x94>)
 80076d8:	f7f9 fe7a 	bl	80013d0 <HAL_PCD_Init>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076e2:	f7f9 f85d 	bl	80007a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076e6:	2180      	movs	r1, #128	; 0x80
 80076e8:	4808      	ldr	r0, [pc, #32]	; (800770c <USBD_LL_Init+0x94>)
 80076ea:	f7fb f8d2 	bl	8002892 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076ee:	2240      	movs	r2, #64	; 0x40
 80076f0:	2100      	movs	r1, #0
 80076f2:	4806      	ldr	r0, [pc, #24]	; (800770c <USBD_LL_Init+0x94>)
 80076f4:	f7fb f886 	bl	8002804 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076f8:	2280      	movs	r2, #128	; 0x80
 80076fa:	2101      	movs	r1, #1
 80076fc:	4803      	ldr	r0, [pc, #12]	; (800770c <USBD_LL_Init+0x94>)
 80076fe:	f7fb f881 	bl	8002804 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200016ec 	.word	0x200016ec

08007710 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007726:	4618      	mov	r0, r3
 8007728:	f7f9 ff6f 	bl	800160a <HAL_PCD_Start>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f942 	bl	80079bc <USBD_Get_USB_Status>
 8007738:	4603      	mov	r3, r0
 800773a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773c:	7bbb      	ldrb	r3, [r7, #14]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	4608      	mov	r0, r1
 8007750:	4611      	mov	r1, r2
 8007752:	461a      	mov	r2, r3
 8007754:	4603      	mov	r3, r0
 8007756:	70fb      	strb	r3, [r7, #3]
 8007758:	460b      	mov	r3, r1
 800775a:	70bb      	strb	r3, [r7, #2]
 800775c:	4613      	mov	r3, r2
 800775e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800776e:	78bb      	ldrb	r3, [r7, #2]
 8007770:	883a      	ldrh	r2, [r7, #0]
 8007772:	78f9      	ldrb	r1, [r7, #3]
 8007774:	f7fa fc40 	bl	8001ff8 <HAL_PCD_EP_Open>
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f91c 	bl	80079bc <USBD_Get_USB_Status>
 8007784:	4603      	mov	r3, r0
 8007786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007788:	7bbb      	ldrb	r3, [r7, #14]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fa fc89 	bl	80020c8 <HAL_PCD_EP_Close>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f8fd 	bl	80079bc <USBD_Get_USB_Status>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ea:	78fa      	ldrb	r2, [r7, #3]
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fa fd61 	bl	80022b6 <HAL_PCD_EP_SetStall>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 f8de 	bl	80079bc <USBD_Get_USB_Status>
 8007800:	4603      	mov	r3, r0
 8007802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007804:	7bbb      	ldrb	r3, [r7, #14]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007828:	78fa      	ldrb	r2, [r7, #3]
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f7fa fda6 	bl	800237e <HAL_PCD_EP_ClrStall>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f8bf 	bl	80079bc <USBD_Get_USB_Status>
 800783e:	4603      	mov	r3, r0
 8007840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007842:	7bbb      	ldrb	r3, [r7, #14]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800785e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007864:	2b00      	cmp	r3, #0
 8007866:	da0b      	bge.n	8007880 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	4613      	mov	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	333e      	adds	r3, #62	; 0x3e
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	e00b      	b.n	8007898 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	4613      	mov	r3, r2
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007896:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fa fb73 	bl	8001fae <HAL_PCD_SetAddress>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f874 	bl	80079bc <USBD_Get_USB_Status>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b086      	sub	sp, #24
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	460b      	mov	r3, r1
 80078f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007900:	7af9      	ldrb	r1, [r7, #11]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	f7fa fc8c 	bl	8002222 <HAL_PCD_EP_Transmit>
 800790a:	4603      	mov	r3, r0
 800790c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	4618      	mov	r0, r3
 8007912:	f000 f853 	bl	80079bc <USBD_Get_USB_Status>
 8007916:	4603      	mov	r3, r0
 8007918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800791a:	7dbb      	ldrb	r3, [r7, #22]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	460b      	mov	r3, r1
 8007932:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007942:	7af9      	ldrb	r1, [r7, #11]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	f7fa fc08 	bl	800215c <HAL_PCD_EP_Receive>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f832 	bl	80079bc <USBD_Get_USB_Status>
 8007958:	4603      	mov	r3, r0
 800795a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800795c:	7dbb      	ldrb	r3, [r7, #22]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	4611      	mov	r1, r2
 800797c:	4618      	mov	r0, r3
 800797e:	f7fa fc38 	bl	80021f2 <HAL_PCD_EP_GetRxCount>
 8007982:	4603      	mov	r3, r0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007994:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <USBD_static_malloc+0x18>)
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20001bf8 	.word	0x20001bf8

080079a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]

}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d817      	bhi.n	8007a00 <USBD_Get_USB_Status+0x44>
 80079d0:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USBD_Get_USB_Status+0x1c>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079e9 	.word	0x080079e9
 80079dc:	080079ef 	.word	0x080079ef
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	080079fb 	.word	0x080079fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e00b      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e008      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	e005      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079fa:	2303      	movs	r3, #3
 80079fc:	73fb      	strb	r3, [r7, #15]
    break;
 80079fe:	e002      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	73fb      	strb	r3, [r7, #15]
    break;
 8007a04:	bf00      	nop
  }
  return usb_status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4d0d      	ldr	r5, [pc, #52]	; (8007a4c <__libc_init_array+0x38>)
 8007a18:	4c0d      	ldr	r4, [pc, #52]	; (8007a50 <__libc_init_array+0x3c>)
 8007a1a:	1b64      	subs	r4, r4, r5
 8007a1c:	10a4      	asrs	r4, r4, #2
 8007a1e:	2600      	movs	r6, #0
 8007a20:	42a6      	cmp	r6, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	4d0b      	ldr	r5, [pc, #44]	; (8007a54 <__libc_init_array+0x40>)
 8007a26:	4c0c      	ldr	r4, [pc, #48]	; (8007a58 <__libc_init_array+0x44>)
 8007a28:	f000 f820 	bl	8007a6c <_init>
 8007a2c:	1b64      	subs	r4, r4, r5
 8007a2e:	10a4      	asrs	r4, r4, #2
 8007a30:	2600      	movs	r6, #0
 8007a32:	42a6      	cmp	r6, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3c:	4798      	blx	r3
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a46:	4798      	blx	r3
 8007a48:	3601      	adds	r6, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	08007aec 	.word	0x08007aec
 8007a50:	08007aec 	.word	0x08007aec
 8007a54:	08007aec 	.word	0x08007aec
 8007a58:	08007af0 	.word	0x08007af0

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
